<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gRPC – MMDetection中文文档</title>
    <link>https://Joevaen.github.io/docs/</link>
    <description>Recent content in MMDetection中文文档 on gRPC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="https://Joevaen.github.io/docs/feed.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 1.修改使用自定义数据集的配置文件</title>
      <link>https://Joevaen.github.io/docs/languages/csharp/new_data_format/reorganize_exist/modify/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/csharp/new_data_format/reorganize_exist/modify/</guid>
      <description>
        
        
        &lt;p&gt;修改配置文件包括两个方面:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;data&lt;/code&gt; 字段。 特别指出, 你需要明确地在 &lt;code&gt;data.train&lt;/code&gt;, &lt;code&gt;data.val&lt;/code&gt; 和 &lt;code&gt;data.test&lt;/code&gt; 加入&lt;code&gt;classes&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;model&lt;/code&gt;部分的&lt;code&gt;num_classes&lt;/code&gt;字段。 从默认值（例如，Coco中的默认值80）明确地写下所有&lt;code&gt;num_classes&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在 &lt;code&gt;configs/my_custom_config.py&lt;/code&gt; 中:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 新配置继承了基础配置以突出显示必要的修改&lt;/span&gt;
_base_ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;./cascade_mask_rcnn_r50_fpn_1x_coco.py&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 1. 数据集设置&lt;/span&gt;
dataset_type &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;CocoDataset&amp;#39;&lt;/span&gt;
classes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;)
data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
    samples_per_gpu&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,
    workers_per_gpu&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,
    train&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
        &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;dataset_type,
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 明确在classes字段中加入类别名&lt;/span&gt;
        classes&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;classes,
        ann_file&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;path/to/your/train/annotation_data&amp;#39;&lt;/span&gt;,
        img_prefix&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;path/to/your/train/image_data&amp;#39;&lt;/span&gt;),
    val&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
        &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;dataset_type,
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 明确在classes字段中加入类别名&lt;/span&gt;
        classes&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;classes,
        ann_file&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;path/to/your/val/annotation_data&amp;#39;&lt;/span&gt;,
        img_prefix&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;path/to/your/val/image_data&amp;#39;&lt;/span&gt;),
    test&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
        &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;dataset_type,
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 明确在classes字段中加入类别名&lt;/span&gt;
        classes&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;classes,
        ann_file&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;path/to/your/test/annotation_data&amp;#39;&lt;/span&gt;,
        img_prefix&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;path/to/your/test/image_data&amp;#39;&lt;/span&gt;))

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 2. 模型设置&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 明确地覆写`num_classes`字段。&lt;/span&gt;
model &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
    roi_head&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
        bbox_head&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[
            &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
                &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Shared2FCBBoxHead&amp;#39;&lt;/span&gt;,
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 明确地覆写`num_classes`字段。&lt;/span&gt;
                num_classes&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;),
            &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
                &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Shared2FCBBoxHead&amp;#39;&lt;/span&gt;,
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 明确地覆写`num_classes`字段。&lt;/span&gt;
                num_classes&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;),
            &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
                &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Shared2FCBBoxHead&amp;#39;&lt;/span&gt;,
                &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 明确地覆写`num_classes`字段。&lt;/span&gt;
                num_classes&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)],
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# 明确地覆写`num_classes`字段。&lt;/span&gt;
    mask_head&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(num_classes&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 1.定义一个neck</title>
      <link>https://Joevaen.github.io/docs/languages/go/develop_new_components/add_neck/define/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/go/develop_new_components/add_neck/define/</guid>
      <description>
        
        
        &lt;p&gt;新建一个文件 &lt;code&gt;mmdet/models/necks/pafpn.py&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;..builder&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; NECKS

&lt;span style=&#34;color:#99f&#34;&gt;@NECKS.register_module&lt;/span&gt;()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;PAFPN&lt;/span&gt;(nn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;Module):

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self,
                in_channels,
                out_channels,
                num_outs,
                start_level&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,
                end_level&lt;span style=&#34;color:#555&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,
                add_extra_convs&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;False):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;forward&lt;/span&gt;(self, inputs):
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# implementation is ignored&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 1.定义一个新的优化器</title>
      <link>https://Joevaen.github.io/docs/languages/java/optimizer_setting/self_implemented/define/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/java/optimizer_setting/self_implemented/define/</guid>
      <description>
        
        
        &lt;p&gt;一个自定义优化器可以通过如下方法定义：
假设你想添加一个名为&lt;code&gt;MyOptimizer&lt;/code&gt;，且含有参数&lt;code&gt;a&lt;/code&gt;、&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;c&lt;/code&gt;的优化器。
你需要创建一个名为&lt;code&gt;mmdet/core/optimizer&lt;/code&gt;的新的路径。
然后在文件中实现这个新的优化器，比如在&lt;code&gt;mmdet/core/optimizer/my_optimizer.py&lt;/code&gt;中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;.registry&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; OPTIMIZERS
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;torch.optim&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; Optimizer


&lt;span style=&#34;color:#99f&#34;&gt;@OPTIMIZERS.register_module&lt;/span&gt;()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;MyOptimizer&lt;/span&gt;(Optimizer):

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, a, b, c)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 1.定义一个新的骨架</title>
      <link>https://Joevaen.github.io/docs/languages/go/develop_new_components/add_backbone/define/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/go/develop_new_components/add_backbone/define/</guid>
      <description>
        
        
        &lt;p&gt;新建一个文件 &lt;code&gt;mmdet/models/backbones/mobilenet.py&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;torch.nn&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;nn&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;..builder&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; BACKBONES


&lt;span style=&#34;color:#99f&#34;&gt;@BACKBONES.register_module&lt;/span&gt;()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;MobileNet&lt;/span&gt;(nn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;Module):

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, arg1, arg2):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;forward&lt;/span&gt;(self, x):  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# should return a tuple&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 1.定义一个新的骨架</title>
      <link>https://Joevaen.github.io/docs/languages/go/develop_new_components/add_loss/define/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/go/develop_new_components/add_loss/define/</guid>
      <description>
        
        
        &lt;p&gt;新建一个文件 &lt;code&gt;mmdet/models/backbones/mobilenet.py&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;torch.nn&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;nn&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;..builder&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; BACKBONES


&lt;span style=&#34;color:#99f&#34;&gt;@BACKBONES.register_module&lt;/span&gt;()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;MobileNet&lt;/span&gt;(nn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;Module):

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, arg1, arg2):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;forward&lt;/span&gt;(self, x):  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# should return a tuple&lt;/span&gt;
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 1.将MMDetection模型转换到TorchServe</title>
      <link>https://Joevaen.github.io/docs/guides/serving/convert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/guides/serving/convert/</guid>
      <description>
        
        
        &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;python tools/deployment/mmdet2torchserve.py &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;CONFIG_FILE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;CHECKPOINT_FILE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--output-folder &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;MODEL_STORE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--model-name &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;MODEL_NAME&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;*&lt;strong&gt;Note&lt;/strong&gt;: ${MODEL_STORE} needs to be an absolute path to a folder.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 4.例子NumClassCheckHook</title>
      <link>https://Joevaen.github.io/docs/languages/java/hooks/self_implemented/define/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/java/hooks/self_implemented/define/</guid>
      <description>
        
        
        &lt;p&gt;我们实现了一个名为 &lt;a href=&#34;https://github.com/open-mmlab/mmdetection/blob/master/mmdet/datasets/utils.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NumClassCheckHook&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;的自定义hook，来检查head中的&lt;code&gt;num_classes&lt;/code&gt;是否匹配&lt;code&gt;dataset&lt;/code&gt;中的&lt;code&gt;CLASSES&lt;/code&gt;的长度。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;custom_hooks &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;NumClassCheckHook&amp;#39;&lt;/span&gt;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: checkpoint配置文件</title>
      <link>https://Joevaen.github.io/docs/languages/java/hooks/optimizer_constructor/checkpoint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/java/hooks/optimizer_constructor/checkpoint/</guid>
      <description>
        
        
        &lt;p&gt;MMCV会使用 &lt;code&gt;checkpoint_config&lt;/code&gt; 来初始化&lt;a href=&#34;https://github.com/open-mmlab/mmcv/blob/9ecd6b0d5ff9d2172c49a182eaa669e9f27bb8e7/mmcv/runner/hooks/checkpoint.py#L9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;CheckpointHook&lt;/code&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;checkpoint_config &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(interval&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用者可以设置 &lt;code&gt;max_keep_ckpts&lt;/code&gt; 来只保存少量的checkpoints或通过&lt;code&gt;save_optimizer&lt;/code&gt;决定是否保存优化的状态字典。关于参数的更多细节在 &lt;a href=&#34;https://mmcv.readthedocs.io/en/latest/api.html#mmcv.runner.CheckpointHook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: log分析</title>
      <link>https://Joevaen.github.io/docs/guides/log_analysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/guides/log_analysis/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;tools/analysis_tools/analyze_logs.py&lt;/code&gt; plots loss/mAP curves given a training
log file. Run &lt;code&gt;pip install seaborn&lt;/code&gt; first to install the dependency.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;python tools/analysis_tools/analyze_logs.py plot_curve &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--keys &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;KEYS&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--title &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;TITLE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--legend &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;LEGEND&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--backend &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;BACKEND&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--style &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;STYLE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--out &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;OUT_FILE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;../resources/loss_curve.png&#34; alt=&#34;loss curve image&#34; id=&#34;loss_curve&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-loss_curve&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-loss_curve&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;../resources/loss_curve.png&#34; alt=&#34;loss curve image&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Plot the classification loss of some run.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;python tools/analysis_tools/analyze_logs.py plot_curve log.json --keys loss_cls --legend loss_cls
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Plot the classification and regression loss of some run, and save the figure to a pdf.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;python tools/analysis_tools/analyze_logs.py plot_curve log.json --keys loss_cls loss_bbox --out losses.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compare the bbox mAP of two runs in the same figure.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;python tools/analysis_tools/analyze_logs.py plot_curve log1.json log2.json --keys bbox_mAP --legend run1 run2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compute the average training speed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;python tools/analysis_tools/analyze_logs.py cal_train_time log.json &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--include-outliers&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output is expected to be like the following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;-----Analyze train time of work_dirs/some_exp/20190611_192040.log.json-----
slowest epoch 11, average time is 1.2024
fastest epoch 1, average time is 1.1909
time std over epochs is 0.0028
average iter time: 1.1959 s/iter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: MMCV版本</title>
      <link>https://Joevaen.github.io/docs/notes/compatibility/mmdetection2/mmcv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/notes/compatibility/mmdetection2/mmcv/</guid>
      <description>
        
        
        &lt;p&gt;MMDetection v2.12.0 relies on the newest features in MMCV 1.3.3, including &lt;code&gt;BaseModule&lt;/code&gt; for unified parameter initialization, model registry, and the CUDA operator &lt;code&gt;MultiScaleDeformableAttn&lt;/code&gt; for &lt;a href=&#34;https://arxiv.org/abs/2010.04159&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Deformable DETR&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. Note that MMCV 1.3.2 already contains all the features used by MMDet but has known issues. Therefore, we recommend users to skip MMCV v1.3.2 and use v1.3.2, though v1.3.2 might work for most of the cases.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 从MMDetection模型到ONNX</title>
      <link>https://Joevaen.github.io/docs/guides/model_conversion/onnx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/guides/model_conversion/onnx/</guid>
      <description>
        
        
        &lt;p&gt;We provide a script to convert model to &lt;a href=&#34;https://github.com/onnx/onnx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ONNX&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; format. We also support comparing the output results between Pytorch and ONNX model for verification.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;python tools/deployment/pytorch2onnx.py &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;CONFIG_FILE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;CHECKPOINT_FILE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; --output_file &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;ONNX_FILE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--shape &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;INPUT_SHAPE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; --verify&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This tool is still experimental. Some customized operators are not supported for now. For a detailed description of the usage and the list of supported models, please refer to &lt;a href=&#34;tutorials/pytorch2onnx.md&#34;&gt;pytorch2onnx&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 作为扩展的项目</title>
      <link>https://Joevaen.github.io/docs/notes/projects/extension/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/notes/projects/extension/</guid>
      <description>
        
        
        &lt;p&gt;Some projects extend the boundary of MMDetection for deployment or other research fields.
They reveal the potential of what MMDetection can do. We list several of them as below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/opencv/mmdetection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OTEDetection&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;: OpenVINO training extensions for object detection.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/open-mmlab/mmdetection3d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MMDetection3d&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;: OpenMMLab&amp;rsquo;s next-generation platform for general 3D object detection.&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 准备数据集</title>
      <link>https://Joevaen.github.io/docs/quickstart/infer/test_on_standard/prepare/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/quickstart/infer/test_on_standard/prepare/</guid>
      <description>
        
        
        &lt;p&gt;Public datasets like &lt;a href=&#34;http://host.robots.ox.ac.uk/pascal/VOC/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pascal VOC&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; or mirror and &lt;a href=&#34;https://cocodataset.org/#download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;COCO&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; are available from official websites or mirrors. Note: In the detection task, Pascal VOC 2012 is an extension of Pascal VOC 2007 without overlap, and we usually use them together.
It is recommended to download and extract the dataset somewhere outside the project directory and symlink the dataset root to &lt;code&gt;$MMDETECTION/data&lt;/code&gt; as below.
If your folder structure is different, you may need to change the corresponding paths in config files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;mmdetection
├── mmdet
├── tools
├── configs
├── data
│   ├── coco
│   │   ├── annotations
│   │   ├── train2017
│   │   ├── val2017
│   │   ├── test2017
│   ├── cityscapes
│   │   ├── annotations
│   │   ├── leftImg8bit
│   │   │   ├── train
│   │   │   ├── val
│   │   ├── gtFine
│   │   │   ├── train
│   │   │   ├── val
│   ├── VOCdevkit
│   │   ├── VOC2007
│   │   ├── VOC2012
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some models require additional &lt;a href=&#34;http://calvin.inf.ed.ac.uk/wp-content/uploads/data/cocostuffdataset/stuffthingmaps_trainval2017.zip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;COCO-stuff&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; datasets, such as HTC, DetectoRS and SCNet, you can download and unzip then move to the coco folder. The directory should be like this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;mmdetection
├── data
│   ├── coco
│   │   ├── annotations
│   │   ├── train2017
│   │   ├── val2017
│   │   ├── test2017
│   │   ├── stuffthingmaps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;a href=&#34;https://www.cityscapes-dataset.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cityscapes&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; annotations need to be converted into the coco format using &lt;code&gt;tools/dataset_converters/cityscapes.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;pip install cityscapesscripts

python tools/dataset_converters/cityscapes.py &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    ./data/cityscapes &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    --nproc &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    --out-dir ./data/cityscapes/annotations
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;TODO: CHANGE TO THE NEW PATH&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 创建一个新的hook</title>
      <link>https://Joevaen.github.io/docs/languages/java/hooks/optimizer_torch/new_hook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/java/hooks/optimizer_torch/new_hook/</guid>
      <description>
        
        
        &lt;p&gt;There are some occasions when the users might need to implement a new hook. MMDetection supports customized hooks in training (#3395) since v2.3.0. Thus the users could implement a hook directly in mmdet or their mmdet-based codebases and use the hook by only modifying the config in training.
Before v2.3.0, the users need to modify the code to get the hook registered before training starts.
Here we give an example of creating a new hook in mmdet and using it in training.
有时候用户可能需要实现新hook。 MMDetection自V2.3.0以来支持训练定制hook。 因此，用户可以直接在MMDET或基于MMDET的代码库中实现hook，并仅通过在训练中修改配置来使用hook。 在v2.3.0之前，用户需要修改代码以在训练开始之前获取已注册的hook。 在这里，我们举例说明在MMDET中创建新hook并在训练中使用它。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;mmcv.runner&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; HOOKS, Hook


&lt;span style=&#34;color:#99f&#34;&gt;@HOOKS.register_module&lt;/span&gt;()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;MyHook&lt;/span&gt;(Hook):

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, a, b):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;before_run&lt;/span&gt;(self, runner):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;after_run&lt;/span&gt;(self, runner):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;before_epoch&lt;/span&gt;(self, runner):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;after_epoch&lt;/span&gt;(self, runner):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;before_iter&lt;/span&gt;(self, runner):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;after_iter&lt;/span&gt;(self, runner):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;取决于hook的功能，使用者需要确定hook会在训练的&lt;code&gt;before_run&lt;/code&gt;, &lt;code&gt;after_run&lt;/code&gt;, &lt;code&gt;before_epoch&lt;/code&gt;, &lt;code&gt;after_epoch&lt;/code&gt;, &lt;code&gt;before_iter&lt;/code&gt;, 和 &lt;code&gt;after_iter&lt;/code&gt;各个阶段做些什么事情。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 前提</title>
      <link>https://Joevaen.github.io/docs/languages/objective-c/convert/pre/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/objective-c/convert/pre/</guid>
      <description>
        
        
        &lt;ol&gt;
&lt;li&gt;先根据上述指南进行MMCV和MMDetection的安装。&lt;/li&gt;
&lt;li&gt;安装onnx和onnxruntime&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;pip install onnx onnxruntime
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 前提</title>
      <link>https://Joevaen.github.io/docs/languages/objective-c/evaluate/pre/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/objective-c/evaluate/pre/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;
&lt;p&gt;安装 onnx 和 onnxruntime-gpu&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;pip install onnx onnxruntime-gpu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装 TensorRT 通过 &lt;a href=&#34;https://mmcv.readthedocs.io/en/latest/tensorrt_plugin.html#how-to-build-tensorrt-plugins-in-mmcv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;how-to-build-tensorrt-plugins-in-mmcv&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;(可选)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 前提</title>
      <link>https://Joevaen.github.io/docs/languages/php/convert/pre/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/php/convert/pre/</guid>
      <description>
        
        
        &lt;ol&gt;
&lt;li&gt;参考上面提到的方法安装MMCV和MMDetection。&lt;/li&gt;
&lt;li&gt;参考&lt;a href=&#34;https://mmcv.readthedocs.io/en/latest/onnxruntime_op.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ONNXRuntime in mmcv&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/open-mmlab/mmcv/blob/master/docs/tensorrt_plugin.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TensorRT plugin in mmcv&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; 安装带有ONNXRuntime定制操作的和TensorRT插件。&lt;/li&gt;
&lt;li&gt;使用 &lt;a href=&#34;https://mmdetection.readthedocs.io/en/latest/tutorials/pytorch2onnx.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pytorch2onnx&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; 把PyTorch模型转换为ONNX.&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 单GPU训练</title>
      <link>https://Joevaen.github.io/docs/quickstart/infer/predefined/single_gpu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/quickstart/infer/predefined/single_gpu/</guid>
      <description>
        
        
        &lt;p&gt;We provide &lt;code&gt;tools/train.py&lt;/code&gt; to launch training jobs on a single GPU.
The basic usage is as follows.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;python tools/train.py &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;CONFIG_FILE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;optional arguments&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;During training, log files and checkpoints will be saved to the working directory, which is specified by &lt;code&gt;work_dir&lt;/code&gt; in the config file or via CLI argument &lt;code&gt;--work-dir&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;By default, the model is evaluated on the validation set every epoch, the evaluation interval can be specified in the config file as shown below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# evaluate the model every 12 epoch.&lt;/span&gt;
evaluation &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(interval&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;12&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This tool accepts several optional arguments, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--no-validate&lt;/code&gt; (&lt;strong&gt;not suggested&lt;/strong&gt;): Disable evaluation during training.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--work-dir ${WORK_DIR}&lt;/code&gt;: Override the working directory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--resume-from ${CHECKPOINT_FILE}&lt;/code&gt;: Resume from a previous checkpoint file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--options &#39;Key=value&#39;&lt;/code&gt;: Overrides other settings in the used config.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Difference between &lt;code&gt;resume-from&lt;/code&gt; and &lt;code&gt;load-from&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;resume-from&lt;/code&gt; loads both the model weights and optimizer status, and the epoch is also inherited from the specified checkpoint. It is usually used for resuming the training process that is interrupted accidentally.
&lt;code&gt;load-from&lt;/code&gt; only loads the model weights and the training epoch starts from 0. It is usually used for finetuning.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 可视化数据</title>
      <link>https://Joevaen.github.io/docs/guides/visual/data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/guides/visual/data/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;tools/misc/browse_dataset.py&lt;/code&gt; helps the user to browse a detection dataset (both
images and bounding box annotations) visually, or save the image to a
designated directory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;python tools/misc/browse_dataset.py &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;CONFIG&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;-h&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--skip-type &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;SKIP_TYPE&lt;/span&gt;[SKIP_TYPE...]&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--output-dir &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;OUTPUT_DIR&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--not-show&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--show-interval &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;SHOW_INTERVAL&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 同时启动多个作业</title>
      <link>https://Joevaen.github.io/docs/quickstart/infer/predefined/multi/launch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/quickstart/infer/predefined/multi/launch/</guid>
      <description>
        
        
        &lt;p&gt;If you would like to launch multiple jobs on a single machine, e.g., 2 jobs of 4-GPU training on a machine with 8 GPUs,
you need to specify different ports (29500 by default) for each job to avoid communication conflict.&lt;/p&gt;
&lt;p&gt;If you use &lt;code&gt;dist_train.sh&lt;/code&gt; to launch training jobs, you can set the port in commands.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#033&#34;&gt;CUDA_VISIBLE_DEVICES&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;0,1,2,3 &lt;span style=&#34;color:#033&#34;&gt;PORT&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;29500&lt;/span&gt; ./tools/dist_train.sh &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;CONFIG_FILE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;color:#033&#34;&gt;CUDA_VISIBLE_DEVICES&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;4,5,6,7 &lt;span style=&#34;color:#033&#34;&gt;PORT&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;29501&lt;/span&gt; ./tools/dist_train.sh &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;CONFIG_FILE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 图像演示</title>
      <link>https://Joevaen.github.io/docs/quickstart/infer/existing_infer/demo/image_demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/quickstart/infer/existing_infer/demo/image_demo/</guid>
      <description>
        
        
        &lt;p&gt;This script performs inference on a single image.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;python demo/image_demo.py &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;IMAGE_FILE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;CONFIG_FILE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;CHECKPOINT_FILE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--device &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;GPU_ID&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--score-thr &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;SCORE_THR&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;python demo/image_demo.py demo/demo.jpg &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    configs/faster_rcnn/faster_rcnn_r50_fpn_1x_coco.py &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    checkpoints/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    --device cpu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 坐标系统</title>
      <link>https://Joevaen.github.io/docs/notes/compatibility/mmdetection1/cord/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/notes/compatibility/mmdetection1/cord/</guid>
      <description>
        
        
        &lt;p&gt;The new coordinate system is consistent with &lt;a href=&#34;https://github.com/facebookresearch/detectron2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Detectron2&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and treats the center of the most left-top pixel as (0, 0) rather than the left-top corner of that pixel.
Accordingly, the system interprets the coordinates in COCO bounding box and segmentation annotations as coordinates in range &lt;code&gt;[0, width]&lt;/code&gt; or &lt;code&gt;[0, height]&lt;/code&gt;.
This modification affects all the computation related to the bbox and pixel selection,
which is more natural and accurate.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The height and width of a box with corners (x1, y1) and (x2, y2) in the new coordinate system is computed as &lt;code&gt;width = x2 - x1&lt;/code&gt; and &lt;code&gt;height = y2 - y1&lt;/code&gt;.
In MMDetection 1.x and previous version, a &amp;ldquo;+ 1&amp;rdquo; was added both height and width.
This modification are in three folds:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Box transformation and encoding/decoding in regression.&lt;/li&gt;
&lt;li&gt;IoU calculation. This affects the matching process between ground truth and bounding box and the NMS process. The effect to compatibility is very negligible, though.&lt;/li&gt;
&lt;li&gt;The corners of bounding box is in float type and no longer quantized. This should provide more accurate bounding box results. This also makes the bounding box and RoIs not required to have minimum size of 1, whose effect is small, though.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The anchors are center-aligned to feature grid points and in float type.
In MMDetection 1.x and previous version, the anchors are in &lt;code&gt;int&lt;/code&gt; type and not center-aligned.
This affects the anchor generation in RPN and all the anchor-based methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ROIAlign is better aligned with the image coordinate system. The new implementation is adopted from &lt;a href=&#34;https://github.com/facebookresearch/detectron2/tree/master/detectron2/layers/csrc/ROIAlign&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Detectron2&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.
The RoIs are shifted by half a pixel by default when they are used to cropping RoI features, compared to MMDetection 1.x.
The old behavior is still available by setting &lt;code&gt;aligned=False&lt;/code&gt; instead of &lt;code&gt;aligned=True&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mask cropping and pasting are more accurate.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;We use the new RoIAlign to crop mask targets. In MMDetection 1.x, the bounding box is quantized before it is used to crop mask target, and the crop process is implemented by numpy. In new implementation, the bounding box for crop is not quantized and sent to RoIAlign. This implementation accelerates the training speed by a large margin (~0.1s per iter, ~2 hour when training Mask R50 for 1x schedule) and should be more accurate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In MMDetection 2.0, the &amp;ldquo;&lt;code&gt;paste_mask()&lt;/code&gt;&amp;rdquo; function is different and should be more accurate than those in previous versions. This change follows the modification in &lt;a href=&#34;https://github.com/facebookresearch/detectron2/blob/master/detectron2/structures/masks.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Detectron2&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and can improve mask AP on COCO by ~0.5% absolute.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 常规安装</title>
      <link>https://Joevaen.github.io/docs/get_start/installation/normal_installation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/get_start/installation/normal_installation/</guid>
      <description>
        
        
        &lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;如果你仅仅想在自己的base环境中进行安装的话，通过以下命令进行简易安装:
&lt;code&gt;pip install mmdet&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过创建conda虚拟环境进行安装并激活：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;conda create -n open-mmlab &lt;span style=&#34;color:#033&#34;&gt;python&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;3.7 -y
conda activate open-mmlab
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;进入pytorch的&lt;a href=&#34;https://pytorch.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官网&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;查找命令进行安装, 比如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;conda install pytorch torchvision -c pytorch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意: 确保CUDA的编译版本和运行版本相匹配。
你能通过&lt;a href=&#34;https://pytorch.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官网&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;查看pytorch和CUDA的匹配关系。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;E.g.1&lt;/code&gt; 如果你已经在/usr/local/cuda下安装有CUDA 10.1的情况下安装Pytorch 1.5，你需要安装带有预制CUDA 10.1的pytorch。命令如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;conda install pytorch &lt;span style=&#34;color:#033&#34;&gt;cudatoolkit&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;10.1 torchvision -c pytorch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;E.g. 2&lt;/code&gt; 如果你已经在/usr/local/cuda下安装有CUDA 9.2的情况下安装Pytorch 1.3.1，你需要安装带有预制CUDA 9.2的pytorch。命令如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;conda install &lt;span style=&#34;color:#033&#34;&gt;pytorch&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;1.3.1 &lt;span style=&#34;color:#033&#34;&gt;cudatoolkit&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;9.2 &lt;span style=&#34;color:#033&#34;&gt;torchvision&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;0.4.2 -c pytorch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果从源代码构建Pytorch而不是安装预设的Pacakge，您可以使用更多的CUDA版本，例如9.0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果要安装MMCV-Full，我们建议您安装预构建包如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;cu_version&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;/&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;torch_version&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;/index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请将URL中的{cu_version}和{torch_version}替换为所需的{cu_version}和{torch_version}。 例如，要使用CUDA 11和Pytorch 1.7.0安装最新的MMCV-Full，请使用以下命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;pip install mmcv-full -f https://download.openmmlab.com/mmcv/dist/cu110/torch1.7.0/index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;请参阅&lt;a href=&#34;https://github.com/open-mmlab/mmcv#install-with-pip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此处&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;查看不同版本的MMCV兼容不同的Pytorch和CUDA版本。
您也可以选择通过以下命令从源编译mmcv。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git clone https://github.com/open-mmlab/mmcv.git
&lt;span style=&#34;color:#366&#34;&gt;cd&lt;/span&gt; mmcv
&lt;span style=&#34;color:#033&#34;&gt;MMCV_WITH_OPS&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; pip install -e .  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# package mmcv-full will be installed after this step&lt;/span&gt;
&lt;span style=&#34;color:#366&#34;&gt;cd&lt;/span&gt; ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者直接运行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;pip install mmcv-full
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;克隆MMDetection仓库。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;git clone https://github.com/open-mmlab/mmdetection.git
&lt;span style=&#34;color:#366&#34;&gt;cd&lt;/span&gt; mmdetection
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安装构建要求，然后安装MMDetection。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;pip install -r requirements/build.txt
pip install -v -e .  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# or &amp;#34;python setup.py develop&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;p&gt;a. 按照上述说明安装之后，MMDetection安装在Dev（开发者）模式上，对代码所做的任何本地修改都将生效，而无需重新安装它。&lt;/p&gt;
&lt;p&gt;b. 如果你想使用 &lt;code&gt;opencv-python-headless&lt;/code&gt; 来替代 &lt;code&gt;opencv-python&lt;/code&gt;,
在安装MMCV之前进行安装。&lt;/p&gt;
&lt;p&gt;c. 一些依赖都是可选择的。简单运行 &lt;code&gt;pip install -v -e .&lt;/code&gt; 只会安装最少的运行依赖。如果想使用例如 &lt;code&gt;albumentations&lt;/code&gt; 和 &lt;code&gt;imagecorruptions&lt;/code&gt; ，要么通过 &lt;code&gt;pip install -r requirements/optional.txt&lt;/code&gt; 进行认为安装，或者指定特定的包通过 &lt;code&gt;pip&lt;/code&gt; (e.g. &lt;code&gt;pip install -v -e .[optional]&lt;/code&gt;)进行安装。其他的有效键是: &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;tests&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt;, 和 &lt;code&gt;optional&lt;/code&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 忘记基本配置文件中的一些字段</title>
      <link>https://Joevaen.github.io/docs/languages/cpp/faq/faq1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/cpp/faq/faq1/</guid>
      <description>
        
        
        &lt;p&gt;有时，你可能会设置 &lt;code&gt;_delete_=True&lt;/code&gt; 来忽略基本配置文件中的字段，你需要到(mmcv)[https://mmcv.readthedocs.io/en/latest/utils.html#inherit-from-base-config-with-ignored-fields]查看一些简单的说明。&lt;/p&gt;
&lt;p&gt;比如，在MMDetection中, 通过下面的配置文件修改Mask R-CNN的骨架。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;model &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
    &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;MaskRCNN&amp;#39;&lt;/span&gt;,
    pretrained&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;torchvision://resnet50&amp;#39;&lt;/span&gt;,
    backbone&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
        &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;ResNet&amp;#39;&lt;/span&gt;,
        depth&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;50&lt;/span&gt;,
        num_stages&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;,
        out_indices&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;),
        frozen_stages&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,
        norm_cfg&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;BN&amp;#39;&lt;/span&gt;, requires_grad&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;True),
        norm_eval&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;True,
        style&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;pytorch&amp;#39;&lt;/span&gt;),
    neck&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;),
    rpn_head&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;),
    roi_head&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ResNet&lt;/code&gt; 和 &lt;code&gt;HRNet&lt;/code&gt; 使用不同的关键词去构建。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;_base_ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;../mask_rcnn/mask_rcnn_r50_fpn_1x_coco.py&amp;#39;&lt;/span&gt;
model &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
    pretrained&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;open-mmlab://msra/hrnetv2_w32&amp;#39;&lt;/span&gt;,
    backbone&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
        _delete_&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;True,
        &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;HRNet&amp;#39;&lt;/span&gt;,
        extra&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
            stage1&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
                num_modules&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,
                num_branches&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,
                block&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;BOTTLENECK&amp;#39;&lt;/span&gt;,
                num_blocks&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;, ),
                num_channels&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;64&lt;/span&gt;, )),
            stage2&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
                num_modules&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,
                num_branches&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;,
                block&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;BASIC&amp;#39;&lt;/span&gt;,
                num_blocks&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;),
                num_channels&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;64&lt;/span&gt;)),
            stage3&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
                num_modules&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;,
                num_branches&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;,
                block&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;BASIC&amp;#39;&lt;/span&gt;,
                num_blocks&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;),
                num_channels&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;128&lt;/span&gt;)),
            stage4&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
                num_modules&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;,
                num_branches&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;,
                block&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;BASIC&amp;#39;&lt;/span&gt;,
                num_blocks&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;),
                num_channels&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;32&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;64&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;128&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;256&lt;/span&gt;)))),
    neck&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;_delete_=True&lt;/code&gt; 会把 &lt;code&gt;backbone&lt;/code&gt; 中所有旧的键用新的键代替。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 损失</title>
      <link>https://Joevaen.github.io/docs/notes/convention/loss/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/notes/convention/loss/</guid>
      <description>
        
        
        &lt;p&gt;In MMDetection, a &lt;code&gt;dict&lt;/code&gt; containing losses and metrics will be returned by &lt;code&gt;model(**data)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, in bbox head,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;BBoxHead&lt;/span&gt;(nn&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;Module):
    &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;loss&lt;/span&gt;(self, &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;):
        losses &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;()
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# classification loss&lt;/span&gt;
        losses[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;loss_cls&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;loss_cls(&lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;)
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# classification accuracy&lt;/span&gt;
        losses[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;acc&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; accuracy(&lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;)
        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# bbox regression loss&lt;/span&gt;
        losses[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;loss_bbox&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;loss_bbox(&lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; losses
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;bbox_head.loss()&lt;/code&gt; will be called during model forward.
The returned dict contains &lt;code&gt;&#39;loss_bbox&#39;&lt;/code&gt;, &lt;code&gt;&#39;loss_cls&#39;&lt;/code&gt;, &lt;code&gt;&#39;acc&#39;&lt;/code&gt; .
Only &lt;code&gt;&#39;loss_bbox&#39;&lt;/code&gt;, &lt;code&gt;&#39;loss_cls&#39;&lt;/code&gt; will be used during back propagation,
&lt;code&gt;&#39;acc&#39;&lt;/code&gt; will only be used as a metric to monitor training process.&lt;/p&gt;
&lt;p&gt;By default, only values whose keys contain &lt;code&gt;&#39;loss&#39;&lt;/code&gt; will be back propagated.
This behavior could be changed by modifying &lt;code&gt;BaseDetector.train_step()&lt;/code&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 数据加载</title>
      <link>https://Joevaen.github.io/docs/languages/dart/design_pipeline/data_load/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/dart/design_pipeline/data_load/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;LoadImageFromFile&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add: img, img_shape, ori_shape&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;LoadAnnotations&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add: gt_bboxes, gt_bboxes_ignore, gt_labels, gt_masks, gt_semantic_seg, bbox_fields, mask_fields&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;LoadProposals&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;add: proposals&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 环境配置</title>
      <link>https://Joevaen.github.io/docs/get_start/prerequisites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/get_start/prerequisites/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;Linux or macOS (Windows当前仅提供实验支持)&lt;/li&gt;
&lt;li&gt;Python 3.6+&lt;/li&gt;
&lt;li&gt;PyTorch 1.3+&lt;/li&gt;
&lt;li&gt;CUDA 9.2+ (如果你是从源编译的Pytorch，CUDA9.0也支持。)&lt;/li&gt;
&lt;li&gt;GCC 5+&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mmcv.readthedocs.io/en/latest/#installation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MMCV&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是安装MMDetection所需要的MMCV的版本，请安装表格进行安装避免产生相关环境问题。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;MMDetection version&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;MMCV version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;master&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;mmcv-full&amp;gt;=1.3.3, &amp;lt;1.4.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.12.0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;mmcv-full&amp;gt;=1.3.3, &amp;lt;1.4.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.11.0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;mmcv-full&amp;gt;=1.2.4, &amp;lt;1.4.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.10.0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;mmcv-full&amp;gt;=1.2.4, &amp;lt;1.4.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.9.0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;mmcv-full&amp;gt;=1.2.4, &amp;lt;1.4.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.8.0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;mmcv-full&amp;gt;=1.2.4, &amp;lt;1.4.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.7.0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;mmcv-full&amp;gt;=1.1.5, &amp;lt;1.4.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.6.0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;mmcv-full&amp;gt;=1.1.5, &amp;lt;1.4.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.5.0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;mmcv-full&amp;gt;=1.1.5, &amp;lt;1.4.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.4.0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;mmcv-full&amp;gt;=1.1.1, &amp;lt;1.4.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.3.0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;mmcv-full==1.0.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.3.0rc0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;mmcv-full&amp;gt;=1.0.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.2.1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;mmcv==0.6.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.2.0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;mmcv==0.6.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.1.0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;mmcv&amp;gt;=0.5.9, &amp;lt;=0.6.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2.0.0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;mmcv&amp;gt;=0.5.1, &amp;lt;=0.5.8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意: 如果你实现安装有mmcv，你需要先运行卸载命令 &lt;code&gt;pip uninstall mmcv&lt;/code&gt;。
如果mmcv和mmcv-full都安装有的话, 会出现&lt;code&gt;ModuleNotFoundError&lt;/code&gt;这个错误。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 简单的重复数据集</title>
      <link>https://Joevaen.github.io/docs/languages/csharp/dataset_wraper/simple_repeat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/csharp/dataset_wraper/simple_repeat/</guid>
      <description>
        
        
        &lt;p&gt;我们使用 &lt;code&gt;RepeatDataset&lt;/code&gt; 作为数据集的封装器。 例如, 假设原始数据是 &lt;code&gt;Dataset_A&lt;/code&gt;, 如果要重述它, 配置文件应该如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;dataset_A_train &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
        &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;RepeatDataset&amp;#39;&lt;/span&gt;,
        times&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;N,
        dataset&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# This is the original config of Dataset_A&lt;/span&gt;
            &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Dataset_A&amp;#39;&lt;/span&gt;,
            &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;
            pipeline&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;train_pipeline
        )
    )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 继承基本配置</title>
      <link>https://Joevaen.github.io/docs/languages/node/inherit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/node/inherit/</guid>
      <description>
        
        
        &lt;p&gt;为了减小写整个配置文件的压力和出错的风险，MMDetection V2.0 支持从多个存在的配置的文件中进行继承操作。如果想微调一个Mask RCNN模型，新的配置文件需要继承&lt;code&gt;_base_/models/mask_rcnn_r50_fpn.py&lt;/code&gt;，从而构建一个模型的基本结构。如果要使用Cityscapes Dataset，新的配置文件也能简单继承 &lt;code&gt;_base_/datasets/cityscapes_instance.py&lt;/code&gt;。如果要进行一些runtime设置，比如说training schedule，新的配置文件需要去继承&lt;code&gt;_base_/default_runtime.py&lt;/code&gt;。这个配置文件在&lt;code&gt;configs&lt;/code&gt;路径下，使用者也可以写一个完整的内容，而不用去继承。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;_base_ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;../_base_/models/mask_rcnn_r50_fpn.py&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;../_base_/datasets/cityscapes_instance.py&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;../_base_/default_runtime.py&amp;#39;&lt;/span&gt;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 计算损失的pipeline</title>
      <link>https://Joevaen.github.io/docs/languages/kotlin/pipeline/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/kotlin/pipeline/</guid>
      <description>
        
        
        &lt;p&gt;给定输入预测和目标，以及权重，损失将输入张量映射到最终损失标量。 映射可以分为四个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过损失函数得到&lt;strong&gt;element-wise&lt;/strong&gt; 或者 sample-wise损失。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用权重张量&lt;strong&gt;element-wisely&lt;/strong&gt;给损失加权。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将损失张量减少至 &lt;strong&gt;scalar&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用&lt;strong&gt;scalar&lt;/strong&gt;给损失加权。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 评估算法</title>
      <link>https://Joevaen.github.io/docs/guides/miscellaneous/evaluating/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/guides/miscellaneous/evaluating/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;tools/analysis_tools/eval_metric.py&lt;/code&gt; evaluates certain metrics of a pkl result file
according to a config file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;python tools/analysis_tools/eval_metric.py &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;CONFIG&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;PKL_RESULTS&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;-h&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--format-only&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--eval &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;EVAL&lt;/span&gt;[EVAL ...]&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;
                      &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--cfg-options &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;CFG_OPTIONS&lt;/span&gt; [CFG_OPTIONS ...]&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;
                      &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--eval-options &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;EVAL_OPTIONS&lt;/span&gt; [EVAL_OPTIONS ...]&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 调整超参数（步骤1）</title>
      <link>https://Joevaen.github.io/docs/languages/kotlin/tweak/hyper_parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/kotlin/tweak/hyper_parameters/</guid>
      <description>
        
        
        &lt;p&gt;Focal Loss有两个超参数 &lt;code&gt;gamma&lt;/code&gt; 和 &lt;code&gt;beta&lt;/code&gt; ，也就说如果我们想修改这两个值，需要在下面的配置文件中进行修改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;loss_cls&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
    &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;FocalLoss&amp;#39;&lt;/span&gt;,
    use_sigmoid&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;True,
    gamma&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1.5&lt;/span&gt;,
    alpha&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0.5&lt;/span&gt;,
    loss_weight&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1.0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 通过脚本参数修改配置</title>
      <link>https://Joevaen.github.io/docs/languages/cpp/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/cpp/quickstart/</guid>
      <description>
        
        
        &lt;p&gt;使用 &lt;code&gt;tools/train.py&lt;/code&gt; 或 &lt;code&gt;tools/test.py&lt;/code&gt; 提交作业时，您可以指定 &lt;code&gt;-cfg-options&lt;/code&gt; 修改配置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;更新字典链的配置键。&lt;/p&gt;
&lt;p&gt;可以在原始配置的顺序之后指定配置选项。
比如, &lt;code&gt;--cfg-options model.backbone.norm_eval=False&lt;/code&gt; 可以改变 &lt;code&gt;train&lt;/code&gt; 模式中的BN模块配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新配置列表中的键。&lt;/p&gt;
&lt;p&gt;某些Config字典在配置中作为列表组成。例如, 训练管道 &lt;code&gt;data.train.pipeline&lt;/code&gt; 通常是一个列表，形如：&lt;code&gt;[dict(type=&#39;LoadImageFromFile&#39;), ...]&lt;/code&gt;。 如果你想把管道中的 &lt;code&gt;&#39;LoadImageFromFile&#39;&lt;/code&gt; 改成 &lt;code&gt;&#39;LoadImageFromWebcam&#39;&lt;/code&gt;,你需要添加参数 &lt;code&gt;--cfg-options data.train.pipeline.0.type=LoadImageFromWebcam&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更新列表/元组中的值。&lt;/p&gt;
&lt;p&gt;如果要更新的值是列表或元组。 例如, 配置文件通常设置为 &lt;code&gt;workflow=[(&#39;train&#39;, 1)]&lt;/code&gt;。 如果你想修改这个键, 你需要添加参数 &lt;code&gt;--cfg-options workflow=&amp;quot;[(train,1),(val,1)]&amp;quot;&lt;/code&gt;。 注意这个&lt;code&gt;&amp;quot;&lt;/code&gt; 不能忘记加, 加在列表/元组数据类型。引号内不能有空格。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 2.创建docker镜像</title>
      <link>https://Joevaen.github.io/docs/guides/serving/build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/guides/serving/build/</guid>
      <description>
        
        
        &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;docker build -t mmdet-serve:latest docker/serve/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 2.导入模块</title>
      <link>https://Joevaen.github.io/docs/languages/go/develop_new_components/add_backbone/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/go/develop_new_components/add_backbone/import/</guid>
      <description>
        
        
        &lt;p&gt;你可以添加下面这行代码到 &lt;code&gt;mmdet/models/backbones/__init__.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;.mobilenet&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; MobileNet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以添加下面代码到配置文件，从而避免修改原始代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;custom_imports &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
    imports&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;mmdet.models.backbones.mobilenet&amp;#39;&lt;/span&gt;],
    allow_failed_imports&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 2.导入模块</title>
      <link>https://Joevaen.github.io/docs/languages/go/develop_new_components/add_loss/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/go/develop_new_components/add_loss/import/</guid>
      <description>
        
        
        &lt;p&gt;你可以添加下面这行代码到 &lt;code&gt;mmdet/models/backbones/__init__.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;.mobilenet&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; MobileNet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以添加下面代码到配置文件，从而避免修改原始代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;custom_imports &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
    imports&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;mmdet.models.backbones.mobilenet&amp;#39;&lt;/span&gt;],
    allow_failed_imports&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 2.导入模块</title>
      <link>https://Joevaen.github.io/docs/languages/go/develop_new_components/add_neck/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/go/develop_new_components/add_neck/import/</guid>
      <description>
        
        
        &lt;p&gt;你可以添加下面这行代码到 &lt;code&gt;mmdet/models/necks/__init__.py&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;.pafpn&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; PAFPN
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;也可以添加下面代码到配置文件，从而避免修改原始代码。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;custom_imports &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
    imports&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;mmdet.models.necks.pafpn.py&amp;#39;&lt;/span&gt;],
    allow_failed_imports&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 2.将优化器加入注册表</title>
      <link>https://Joevaen.github.io/docs/languages/java/optimizer_setting/self_implemented/import/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/java/optimizer_setting/self_implemented/import/</guid>
      <description>
        
        
        &lt;p&gt;To find the above module defined above, this module should be imported into the main namespace at first. There are two options to achieve it.
为了找到之前定义的模块，这个模块首先应当被导入到主要的命名空间，有两种方法可以实现它。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修改mmdet/core/optimizer/&lt;strong&gt;init&lt;/strong&gt;.py`来导入模块。&lt;/p&gt;
&lt;p&gt;新定义的模块应当被导入到 &lt;code&gt;mmdet/core/optimizer/__init__.py&lt;/code&gt; 使得注册表可以找到新模块并进行添加：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;.my_optimizer&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; MyOptimizer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在配置文件中使用 &lt;code&gt;custom_imports&lt;/code&gt;来人工导入。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;custom_imports &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(imports&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;mmdet.core.optimizer.my_optimizer&amp;#39;&lt;/span&gt;], allow_failed_imports&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;模块 &lt;code&gt;mmdet.core.optimizer.my_optimizer&lt;/code&gt; 会在项目的最开始被导入，然后 &lt;code&gt;MyOptimizer&lt;/code&gt; 这个类会自动注册。
注意只有包含 &lt;code&gt;MyOptimizer&lt;/code&gt; 这个类的包会被导入，&lt;code&gt;mmdet.core.optimizer.my_optimizer.MyOptimizer&lt;/code&gt;不能被直接导入。
事实上，使用者完全可以使用一个不同的文件路径结构来使用这种方法，只要模块的根目录在&lt;code&gt;PYTHONPATH&lt;/code&gt;。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 2.检查自定义数据集的标签</title>
      <link>https://Joevaen.github.io/docs/languages/csharp/new_data_format/reorganize_exist/check/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/csharp/new_data_format/reorganize_exist/check/</guid>
      <description>
        
        
        &lt;p&gt;假设您的自定义数据集是Coco格式，请确保在自定义数据集中有正确的标签：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;标签中 &lt;code&gt;categories&lt;/code&gt; 字段的长度应当等于你的配置文件中 &lt;code&gt;classes&lt;/code&gt; 字段的元组长度, 也就是类别的数目 (这个例子中是5)。&lt;/li&gt;
&lt;li&gt;你配置文件中的&lt;code&gt;classes&lt;/code&gt;字段应当与标签中的&lt;code&gt;catagories&lt;/code&gt;中的&lt;code&gt;name&lt;/code&gt;字段具有相同的元素和顺序。MMDetection 会自动将&lt;code&gt;categories&lt;/code&gt;中的不连续&lt;code&gt;id&lt;/code&gt;自动映射到连续的标签索引，因此配置文件的&lt;code&gt;categories&lt;/code&gt;字段中的&lt;code&gt;name&lt;/code&gt;的字符串顺序会影响标签索引的顺序。同时，在预测bbox的可视化过程中，配置文件中的&lt;code&gt;classes&lt;/code&gt;顺序会影响到标签文本。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;annotations&lt;/code&gt;字段中的&lt;code&gt;category_id&lt;/code&gt;应当是合法的，比如：&lt;code&gt;category_id&lt;/code&gt;的所有值都应当属于&lt;code&gt;categories&lt;/code&gt;的&lt;code&gt;id&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面是一个标签的合法的例子:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;annotations&amp;#39;&lt;/span&gt;: [
    {
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;segmentation&amp;#39;&lt;/span&gt;: [[&lt;span style=&#34;color:#f60&#34;&gt;192.81&lt;/span&gt;,
            &lt;span style=&#34;color:#f60&#34;&gt;247.09&lt;/span&gt;,
            &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;
            &lt;span style=&#34;color:#f60&#34;&gt;219.03&lt;/span&gt;,
            &lt;span style=&#34;color:#f60&#34;&gt;249.06&lt;/span&gt;]],  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# if you have mask labels&lt;/span&gt;
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;area&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;1035.749&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;iscrowd&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;image_id&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;1268&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;bbox&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color:#f60&#34;&gt;192.81&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;224.8&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;74.73&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;33.43&lt;/span&gt;],
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;category_id&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt;,
        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;42986&lt;/span&gt;
    },
    &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;
],

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# MMDetection自动将非连续的id匹配到连续的标签索引。&lt;/span&gt;
&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;categories&amp;#39;&lt;/span&gt;: [
    {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;}, {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;}, {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;}, {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;}, {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#f60&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt;},
 ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们使用这种方式来支持CityScapes DataSet. 脚本在这儿&lt;a href=&#34;https://github.com/open-mmlab/mmdetection/blob/master/tools/dataset_converters/cityscapes.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cityscapes.py&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;。同时我们也提供finetuning &lt;a href=&#34;https://github.com/open-mmlab/mmdetection/blob/master/configs/cityscapes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;configs&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于实例分割数据集, &lt;strong&gt;MMDetection现在仅支持评估COCO数据集的掩码AP&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;建议在训练前脱机转换数据，因此您仍然可以使用COCO数据集，并只需要修改标签的路径和训练类。&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: log配置文件</title>
      <link>https://Joevaen.github.io/docs/languages/java/hooks/optimizer_constructor/log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/java/hooks/optimizer_constructor/log/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;log_config&lt;/code&gt; 封装了多个logger hooks，而且能设置间隔。现在的MMCV支持 &lt;code&gt;WandbLoggerHook&lt;/code&gt;, &lt;code&gt;MlflowLoggerHook&lt;/code&gt;, 和 &lt;code&gt;TensorboardLoggerHook&lt;/code&gt;。细节在&lt;a href=&#34;https://mmcv.readthedocs.io/en/latest/api.html#mmcv.runner.LoggerHook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;doc&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;可以找到。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;log_config &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
    interval&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;50&lt;/span&gt;,
    hooks&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[
        &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;TextLoggerHook&amp;#39;&lt;/span&gt;),
        &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;TensorboardLoggerHook&amp;#39;&lt;/span&gt;)
    ])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: MMDetection 1.x模型到MMDetection 2.x</title>
      <link>https://Joevaen.github.io/docs/guides/model_conversion/mmdetection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/guides/model_conversion/mmdetection/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;tools/model_converters/upgrade_model_version.py&lt;/code&gt; upgrades a previous MMDetection checkpoint
to the new version. Note that this script is not guaranteed to work as some
breaking changes are introduced in the new version. It is recommended to
directly use the new checkpoints.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;python tools/model_converters/upgrade_model_version.py &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;IN_FILE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;OUT_FILE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;-h&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--num-classes NUM_CLASSES&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 仅有cpu安装</title>
      <link>https://Joevaen.github.io/docs/get_start/installation/cpu_only_install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/get_start/installation/cpu_only_install/</guid>
      <description>
        
        
        &lt;h2 id=&#34;install-with-cpu-only&#34;&gt;Install with CPU only&lt;/h2&gt;
&lt;p&gt;使用无GPU或者CUDA不可用的设备。&lt;/p&gt;
&lt;p&gt;In CPU mode you can run the demo/webcam_demo.py for example.
However some functionality is gone in this mode:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deformable Convolution&lt;/li&gt;
&lt;li&gt;Modulated Deformable Convolution&lt;/li&gt;
&lt;li&gt;ROI pooling&lt;/li&gt;
&lt;li&gt;Deformable ROI pooling&lt;/li&gt;
&lt;li&gt;CARAFE: Content-Aware ReAssembly of FEatures&lt;/li&gt;
&lt;li&gt;SyncBatchNorm&lt;/li&gt;
&lt;li&gt;CrissCrossAttention: Criss-Cross Attention&lt;/li&gt;
&lt;li&gt;MaskedConv2d&lt;/li&gt;
&lt;li&gt;Temporal Interlace Shift&lt;/li&gt;
&lt;li&gt;nms_cuda&lt;/li&gt;
&lt;li&gt;sigmoid_focal_loss_cuda&lt;/li&gt;
&lt;li&gt;bbox_overlaps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So if you try to run inference with a model containing above ops you will get an error. The following table lists the related methods that cannot inference on CPU due to dependency on these operators&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Operator&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Model&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Deformable Convolution/Modulated Deformable Convolution&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;DCN、Guided Anchoring、RepPoints、CentripetalNet、VFNet、CascadeRPN、NAS-FCOS、DetectoRS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;MaskedConv2d&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Guided Anchoring&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CARAFE&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;CARAFE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;SyncBatchNorm&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ResNeSt&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Notice&lt;/strong&gt;: MMDetection does not support training with CPU for now.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 代码库惯例</title>
      <link>https://Joevaen.github.io/docs/notes/compatibility/mmdetection1/codebase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/notes/compatibility/mmdetection1/codebase/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MMDetection 2.0 changes the order of class labels to reduce unused parameters in regression and mask branch more naturally (without +1 and -1).
This effect all the classification layers of the model to have a different ordering of class labels. The final layers of regression branch and mask head no longer keep K+1 channels for K categories, and their class orders are consistent with the classification branch.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In MMDetection 2.0, label &amp;ldquo;K&amp;rdquo; means background, and labels [0, K-1] correspond to the K = num_categories object categories.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In MMDetection 1.x and previous version, label &amp;ldquo;0&amp;rdquo; means background, and labels [1, K] correspond to the K categories.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The class order of softmax RPN is still the same as that in 1.x in versions&amp;lt;=2.4.0 while sigmoid RPN is not affected. The class orders in all heads are unified since MMDetection v2.5.0.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Low quality matching in R-CNN is not used. In MMDetection 1.x and previous versions, the &lt;code&gt;max_iou_assigner&lt;/code&gt; will match low quality boxes for each ground truth box in both RPN and R-CNN training. We observe this sometimes does not assign the most perfect GT box to some bounding boxes,
thus MMDetection 2.0 do not allow low quality matching by default in R-CNN training in the new system. This sometimes may slightly improve the box AP (~0.1% absolute).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Separate scale factors for width and height. In MMDetection 1.x and previous versions, the scale factor is a single float in mode &lt;code&gt;keep_ratio=True&lt;/code&gt;. This is slightly inaccurate because the scale factors for width and height have slight difference. MMDetection 2.0 adopts separate scale factors for width and height, the improvement on AP ~0.1% absolute.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Configs name conventions are changed. MMDetection V2.0 adopts the new name convention to maintain the gradually growing model zoo as the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;model&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;_&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;model setting&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;_&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;backbone&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;_&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;neck&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;_&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;norm setting&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;_&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;misc&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;_&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;gpu x batch&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;_&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;schedule&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;_&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;dataset&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;.py,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where the (&lt;code&gt;misc&lt;/code&gt;) includes DCN and GCBlock, etc. More details are illustrated in the &lt;a href=&#34;config.md&#34;&gt;documentation for config&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MMDetection V2.0 uses new ResNet Caffe backbones to reduce warnings when loading pre-trained models. Most of the new backbones&#39; weights are the same as the former ones but do not have &lt;code&gt;conv.bias&lt;/code&gt;, except that they use a different &lt;code&gt;img_norm_cfg&lt;/code&gt;. Thus, the new backbone will not cause warning of unexpected keys.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 修改head</title>
      <link>https://Joevaen.github.io/docs/languages/node/modify_head/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/node/modify_head/</guid>
      <description>
        
        
        &lt;p&gt;新的配置文件需要根据数据集的类别数目修改head，通过在roi_head中修改&lt;code&gt;num_classes&lt;/code&gt;，预训练模型的权重会黑再次使用，除了最后的预测的head。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;model &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
    pretrained&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;None,
    roi_head&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
        bbox_head&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
            &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Shared2FCBBoxHead&amp;#39;&lt;/span&gt;,
            in_channels&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;256&lt;/span&gt;,
            fc_out_channels&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1024&lt;/span&gt;,
            roi_feat_size&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;,
            num_classes&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;,
            bbox_coder&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
                &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;DeltaXYWHBBoxCoder&amp;#39;&lt;/span&gt;,
                target_means&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#f60&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0.&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0.&lt;/span&gt;],
                target_stds&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#f60&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0.1&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0.2&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;0.2&lt;/span&gt;]),
            reg_class_agnostic&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;False,
            loss_cls&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
                &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;CrossEntropyLoss&amp;#39;&lt;/span&gt;, use_sigmoid&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;False, loss_weight&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1.0&lt;/span&gt;),
            loss_bbox&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;SmoothL1Loss&amp;#39;&lt;/span&gt;, beta&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1.0&lt;/span&gt;, loss_weight&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1.0&lt;/span&gt;)),
        mask_head&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
            &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;FCNMaskHead&amp;#39;&lt;/span&gt;,
            num_convs&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;,
            in_channels&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;256&lt;/span&gt;,
            conv_out_channels&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;256&lt;/span&gt;,
            num_classes&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;,
            loss_mask&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
                &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;CrossEntropyLoss&amp;#39;&lt;/span&gt;, use_mask&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;True, loss_weight&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1.0&lt;/span&gt;))))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 可视化模型</title>
      <link>https://Joevaen.github.io/docs/guides/visual/model/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/guides/visual/model/</guid>
      <description>
        
        
        &lt;p&gt;First, convert the model to ONNX as described
&lt;a href=&#34;#convert-mmdetection-model-to-onnx-experimental&#34;&gt;here&lt;/a&gt;.
Note that currently only RetinaNet is supported, support for other models
will be coming in later versions.
The converted model could be visualized by tools like &lt;a href=&#34;https://github.com/lutzroeder/netron&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Netron&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 在配置文件中使用中间变量</title>
      <link>https://Joevaen.github.io/docs/languages/cpp/faq/faq2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/cpp/faq/faq2/</guid>
      <description>
        
        
        &lt;p&gt;有些中间变量可能会在配置文件中进行使用, 比如datasets中的 &lt;code&gt;train_pipeline&lt;/code&gt;/&lt;code&gt;test_pipeline&lt;/code&gt; 。
在子配置文件中修改中间变量并没有什么价值, 使用者需要再次将中间变量传递到相应的字段。
比如, 我们想用多个scale策略来训练 Mask R-CNN。 &lt;code&gt;train_pipeline&lt;/code&gt;/&lt;code&gt;test_pipeline&lt;/code&gt; 就会使我们要修改的中间变量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;_base_ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;./mask_rcnn_r50_fpn_1x_coco.py&amp;#39;&lt;/span&gt;
img_norm_cfg &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
    mean&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#f60&#34;&gt;123.675&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;116.28&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;103.53&lt;/span&gt;], std&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#f60&#34;&gt;58.395&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;57.12&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;57.375&lt;/span&gt;], to_rgb&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;True)
train_pipeline &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;LoadImageFromFile&amp;#39;&lt;/span&gt;),
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;LoadAnnotations&amp;#39;&lt;/span&gt;, with_bbox&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;True, with_mask&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;True),
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
        &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Resize&amp;#39;&lt;/span&gt;,
        img_scale&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[(&lt;span style=&#34;color:#f60&#34;&gt;1333&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;640&lt;/span&gt;), (&lt;span style=&#34;color:#f60&#34;&gt;1333&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;672&lt;/span&gt;), (&lt;span style=&#34;color:#f60&#34;&gt;1333&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;704&lt;/span&gt;), (&lt;span style=&#34;color:#f60&#34;&gt;1333&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;736&lt;/span&gt;),
                   (&lt;span style=&#34;color:#f60&#34;&gt;1333&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;768&lt;/span&gt;), (&lt;span style=&#34;color:#f60&#34;&gt;1333&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;800&lt;/span&gt;)],
        multiscale_mode&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;,
        keep_ratio&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;True),
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;RandomFlip&amp;#39;&lt;/span&gt;, flip_ratio&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0.5&lt;/span&gt;),
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Normalize&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;img_norm_cfg),
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Pad&amp;#39;&lt;/span&gt;, size_divisor&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;32&lt;/span&gt;),
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;DefaultFormatBundle&amp;#39;&lt;/span&gt;),
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Collect&amp;#39;&lt;/span&gt;, keys&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;img&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;gt_bboxes&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;gt_labels&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;gt_masks&amp;#39;&lt;/span&gt;]),
]
test_pipeline &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;LoadImageFromFile&amp;#39;&lt;/span&gt;),
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
        &lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;MultiScaleFlipAug&amp;#39;&lt;/span&gt;,
        img_scale&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1333&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;800&lt;/span&gt;),
        flip&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;False,
        transforms&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[
            &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Resize&amp;#39;&lt;/span&gt;, keep_ratio&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;True),
            &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;RandomFlip&amp;#39;&lt;/span&gt;),
            &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Normalize&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;img_norm_cfg),
            &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Pad&amp;#39;&lt;/span&gt;, size_divisor&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;32&lt;/span&gt;),
            &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;ImageToTensor&amp;#39;&lt;/span&gt;, keys&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;img&amp;#39;&lt;/span&gt;]),
            &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Collect&amp;#39;&lt;/span&gt;, keys&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;img&amp;#39;&lt;/span&gt;]),
        ])
]
data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
    train&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(pipeline&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;train_pipeline),
    val&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(pipeline&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;test_pipeline),
    test&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(pipeline&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;test_pipeline))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先定义新的 &lt;code&gt;train_pipeline&lt;/code&gt;/&lt;code&gt;test_pipeline&lt;/code&gt; 并把他们传到 &lt;code&gt;data&lt;/code&gt;。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 打印配置文件</title>
      <link>https://Joevaen.github.io/docs/guides/miscellaneous/print/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/guides/miscellaneous/print/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;tools/misc/print_config.py&lt;/code&gt; prints the whole config verbatim, expanding all its
imports.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;python tools/misc/print_config.py &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;CONFIG&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;-h&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--options &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;OPTIONS&lt;/span&gt; [OPTIONS...]&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 扩展和使用定制管道</title>
      <link>https://Joevaen.github.io/docs/languages/dart/quickstart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/dart/quickstart/</guid>
      <description>
        
        
        &lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在任意文件中写一个新的pipeline, 比如： &lt;code&gt;my_pipeline.py&lt;/code&gt;. 它将一个字典作为输入，同时输出一个字典。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;mmdet.datasets&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; PIPELINES

&lt;span style=&#34;color:#99f&#34;&gt;@PIPELINES.register_module&lt;/span&gt;()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;MyTransform&lt;/span&gt;:

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __call__(self, results):
        results[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;dummy&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; True
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; results
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导入新的类。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;.my_pipeline&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; MyTransform
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在配置文件中使用它。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;img_norm_cfg &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
    mean&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#f60&#34;&gt;123.675&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;116.28&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;103.53&lt;/span&gt;], std&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#f60&#34;&gt;58.395&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;57.12&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;57.375&lt;/span&gt;], to_rgb&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;True)
train_pipeline &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;LoadImageFromFile&amp;#39;&lt;/span&gt;),
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;LoadAnnotations&amp;#39;&lt;/span&gt;, with_bbox&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;True),
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Resize&amp;#39;&lt;/span&gt;, img_scale&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;1333&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;800&lt;/span&gt;), keep_ratio&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;True),
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;RandomFlip&amp;#39;&lt;/span&gt;, flip_ratio&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0.5&lt;/span&gt;),
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Normalize&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#555&#34;&gt;**&lt;/span&gt;img_norm_cfg),
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Pad&amp;#39;&lt;/span&gt;, size_divisor&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;32&lt;/span&gt;),
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;MyTransform&amp;#39;&lt;/span&gt;),
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;DefaultFormatBundle&amp;#39;&lt;/span&gt;),
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Collect&amp;#39;&lt;/span&gt;, keys&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;img&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;gt_bboxes&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;gt_labels&amp;#39;&lt;/span&gt;]),
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 摄像头演示</title>
      <link>https://Joevaen.github.io/docs/quickstart/infer/existing_infer/demo/webcam_demo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/quickstart/infer/existing_infer/demo/webcam_demo/</guid>
      <description>
        
        
        &lt;p&gt;This is a live demo from a webcam.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;python demo/webcam_demo.py &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;CONFIG_FILE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;CHECKPOINT_FILE&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--device &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;GPU_ID&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--camera-id &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;CAMERA&lt;/span&gt;-ID&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;--score-thr &lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;SCORE_THR&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;python demo/webcam_demo.py &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    configs/faster_rcnn/faster_rcnn_r50_fpn_1x_coco.py &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    checkpoints/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 注册一个新的hook</title>
      <link>https://Joevaen.github.io/docs/languages/java/hooks/optimizer_torch/register/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/java/hooks/optimizer_torch/register/</guid>
      <description>
        
        
        &lt;p&gt;下一步我们需要导入&lt;code&gt;MyHook&lt;/code&gt;，假设你创建的hook在&lt;code&gt;mmdet/core/utils/my_hook.py&lt;/code&gt;中，你需要做以下两件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修改&lt;code&gt;mmdet/core/utils/__init__.py&lt;/code&gt;来导入你的hook。&lt;/p&gt;
&lt;p&gt;新定义的模块应当在 &lt;code&gt;mmdet/core/utils/__init__.py&lt;/code&gt; 中导入，使得注册表可以找到并添加这个模块：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;.my_hook&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; MyHook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;custom_imports&lt;/code&gt;在配置文件中使用&lt;code&gt;custom_imports&lt;/code&gt;来导入hook。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;custom_imports &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(imports&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;mmdet.core.utils.my_hook&amp;#39;&lt;/span&gt;], allow_failed_imports&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
  </channel>
</rss>
