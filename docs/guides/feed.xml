<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gRPC â€“ Guides</title>
    <link>https://Joevaen.github.io/docs/guides/</link>
    <description>Recent content in Guides on gRPC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="https://Joevaen.github.io/docs/guides/feed.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Authentication</title>
      <link>https://Joevaen.github.io/docs/guides/auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/guides/auth/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;gRPC is designed to work with a variety of authentication mechanisms, making it
easy to safely use gRPC to talk to other systems. You can use our supported
mechanisms - SSL/TLS with or without Google token-based authentication - or you
can plug in your own authentication system by extending our provided code.&lt;/p&gt;
&lt;p&gt;gRPC also provides a simple authentication API that lets you provide all the
necessary authentication information as &lt;code&gt;Credentials&lt;/code&gt; when creating a channel or
making a call.&lt;/p&gt;
&lt;h3 id=&#34;supported-auth-mechanisms&#34;&gt;Supported auth mechanisms&lt;/h3&gt;
&lt;p&gt;The following authentication mechanisms are built-in to gRPC:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SSL/TLS&lt;/strong&gt;: gRPC has SSL/TLS integration and promotes the use of SSL/TLS
to authenticate the server, and to encrypt all the data exchanged between
the client and the server. Optional mechanisms are available for clients to
provide certificates for mutual authentication.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ALTS&lt;/strong&gt;: gRPC supports
&lt;a href=&#34;https://cloud.google.com/security/encryption-in-transit/application-layer-transport-security&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ALTS&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
as a transport security mechanism, if the application is running on
&lt;a href=&#34;https://cloud.google.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Cloud Platform (GCP)&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.
For details, see one of the following
language-specific pages:
&lt;a href=&#34;https://Joevaen.github.io/docs/languages/cpp/alts/&#34;&gt;ALTS in C++&lt;/a&gt;,
&lt;a href=&#34;https://Joevaen.github.io/docs/languages/go/alts/&#34;&gt;ALTS in Go&lt;/a&gt;,
&lt;a href=&#34;https://Joevaen.github.io/docs/languages/java/alts/&#34;&gt;ALTS in Java&lt;/a&gt;,
&lt;a href=&#34;https://Joevaen.github.io/docs/languages/python/alts/&#34;&gt;ALTS in Python&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Token-based authentication with Google&lt;/strong&gt;: gRPC provides a generic
mechanism (described below) to attach metadata based credentials to requests
and responses. Additional support for acquiring access tokens
(typically OAuth2 tokens) while accessing Google APIs through gRPC is
provided for certain auth flows: you can see how this works in our code
examples below. In general this mechanism must be used &lt;em&gt;as well as&lt;/em&gt; SSL/TLS
on the channel - Google will not allow connections without SSL/TLS, and
most gRPC language implementations will not let you send credentials on an
unencrypted channel.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;

    Google credentials should only be used to connect to Google services. Sending
a Google issued OAuth2 token to a non-Google service could result in this
token being stolen and used to impersonate the client to Google services.

&lt;/div&gt;

&lt;h3 id=&#34;authentication-api&#34;&gt;Authentication API&lt;/h3&gt;
&lt;p&gt;gRPC provides a simple authentication API based around the unified concept of
Credentials objects, which can be used when creating an entire gRPC channel or
an individual call.&lt;/p&gt;
&lt;h4 id=&#34;credential-types&#34;&gt;Credential types&lt;/h4&gt;
&lt;p&gt;Credentials can be of two types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Channel credentials&lt;/strong&gt;, which are attached to a &lt;code&gt;Channel&lt;/code&gt;, such as SSL
credentials.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Call credentials&lt;/strong&gt;, which are attached to a call (or &lt;code&gt;ClientContext&lt;/code&gt; in
C++).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also combine these in a &lt;code&gt;CompositeChannelCredentials&lt;/code&gt;, allowing you to
specify, for example, SSL details for the channel along with call credentials
for each call made on the channel. A &lt;code&gt;CompositeChannelCredentials&lt;/code&gt; associates a
&lt;code&gt;ChannelCredentials&lt;/code&gt; and a &lt;code&gt;CallCredentials&lt;/code&gt; to create a new
&lt;code&gt;ChannelCredentials&lt;/code&gt;. The result will send the authentication data associated
with the composed &lt;code&gt;CallCredentials&lt;/code&gt; with every call made on the channel.&lt;/p&gt;
&lt;p&gt;For example, you could create a &lt;code&gt;ChannelCredentials&lt;/code&gt; from an &lt;code&gt;SslCredentials&lt;/code&gt;
and an &lt;code&gt;AccessTokenCredentials&lt;/code&gt;. The result when applied to a &lt;code&gt;Channel&lt;/code&gt; would
send the appropriate access token for each call on this channel.&lt;/p&gt;
&lt;p&gt;Individual &lt;code&gt;CallCredentials&lt;/code&gt; can also be composed using
&lt;code&gt;CompositeCallCredentials&lt;/code&gt;. The resulting &lt;code&gt;CallCredentials&lt;/code&gt; when used in a call
will trigger the sending of the authentication data associated with the two
&lt;code&gt;CallCredentials&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;using-client-side-ssltls&#34;&gt;Using client-side SSL/TLS&lt;/h4&gt;
&lt;p&gt;Now let&amp;rsquo;s look at how &lt;code&gt;Credentials&lt;/code&gt; work with one of our supported auth
mechanisms. This is the simplest authentication scenario, where a client just
wants to authenticate the server and encrypt all data. The example is in C++,
but the API is similar for all languages: you can see how to enable SSL/TLS in
more languages in our Examples section below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Create a default SSL ChannelCredentials object.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; channel_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;SslCredentials(grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;SslCredentialsOptions());
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Create a channel using the credentials created in the previous step.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;CreateChannel(server_name, channel_creds);
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Create a stub on the channel.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;std&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;Greeter&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Stub&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; stub(Greeter&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;NewStub(channel));
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Make actual RPC calls on the stub.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Status s &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; stub&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;sayHello(&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;context, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;request, response);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For advanced use cases such as modifying the root CA or using client certs,
the corresponding options can be set in the &lt;code&gt;SslCredentialsOptions&lt;/code&gt; parameter
passed to the factory method.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    Non-POSIX-compliant systems (such as Windows) need to specify the root
certificates in &lt;code&gt;SslCredentialsOptions&lt;/code&gt;, since the defaults are only
configured for POSIX filesystems.

&lt;/div&gt;

&lt;h4 id=&#34;using-google-token-based-authentication&#34;&gt;Using Google token-based authentication&lt;/h4&gt;
&lt;p&gt;gRPC applications can use a simple API to create a credential that works for
authentication with Google in various deployment scenarios. Again, our example
is in C++ but you can find examples in other languages in our Examples section.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;GoogleDefaultCredentials();
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Create a channel, stub and make RPC calls (same as in the previous example)
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;CreateChannel(server_name, creds);
std&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;Greeter&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Stub&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; stub(Greeter&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;NewStub(channel));
grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Status s &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; stub&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;sayHello(&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;context, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;request, response);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This channel credentials object works for applications using Service Accounts as
well as for applications running in &lt;a href=&#34;https://cloud.google.com/compute/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Compute Engine
(GCE)&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.  In the former case, the service
accountâ€™s private keys are loaded from the file named in the environment
variable &lt;code&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/code&gt;. The keys are used to generate bearer
tokens that are attached to each outgoing RPC on the corresponding channel.&lt;/p&gt;
&lt;p&gt;For applications running in GCE, a default service account and corresponding
OAuth2 scopes can be configured during VM setup. At run-time, this credential
handles communication with the authentication systems to obtain OAuth2 access
tokens and attaches them to each outgoing RPC on the corresponding channel.&lt;/p&gt;
&lt;h4 id=&#34;extending-grpc-to-support-other-authentication-mechanisms&#34;&gt;Extending gRPC to support other authentication mechanisms&lt;/h4&gt;
&lt;p&gt;The Credentials plugin API allows developers to plug in their own type of
credentials. This consists of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;MetadataCredentialsPlugin&lt;/code&gt; abstract class, which contains the pure virtual
&lt;code&gt;GetMetadata&lt;/code&gt; method that needs to be implemented by a sub-class created by
the developer.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;MetadataCredentialsFromPlugin&lt;/code&gt; function, which creates a &lt;code&gt;CallCredentials&lt;/code&gt;
from the &lt;code&gt;MetadataCredentialsPlugin&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is example of a simple credentials plugin which sets an authentication
ticket in a custom header.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;MyCustomAuthenticator&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;MetadataCredentialsPlugin {
 &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;
  MyCustomAuthenticator(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; ticket) &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; ticket_(ticket) {}

  grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Status GetMetadata(
      grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;string_ref service_url, grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;string_ref method_name,
      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;AuthContext&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; channel_auth_context,
      std&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;multimap&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;string, grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;*&lt;/span&gt; metadata) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;override&lt;/span&gt; {
    metadata&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;insert(std&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;x-custom-auth-ticket&amp;#34;&lt;/span&gt;, ticket_));
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Status&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;OK;
  }

 &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;
  grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;string ticket_;
};

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; call_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;MetadataCredentialsFromPlugin(
    std&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;MetadataCredentialsPlugin&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;(
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; MyCustomAuthenticator(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;super-secret-ticket&amp;#34;&lt;/span&gt;)));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A deeper integration can be achieved by plugging in a gRPC credentials
implementation at the core level. gRPC internals also allow switching out
SSL/TLS with other encryption mechanisms.&lt;/p&gt;
&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;
&lt;p&gt;These authentication mechanisms will be available in all gRPC&amp;rsquo;s supported
languages. The following sections demonstrate how authentication and
authorization features described above appear in each language: more languages
are coming soon.&lt;/p&gt;
&lt;h4 id=&#34;go&#34;&gt;Go&lt;/h4&gt;
&lt;h5 id=&#34;base-case---no-encryption-or-authentication&#34;&gt;Base case - no encryption or authentication&lt;/h5&gt;
&lt;p&gt;Client:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;conn, _ &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; grpc.&lt;span style=&#34;color:#c0f&#34;&gt;Dial&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;localhost:50051&amp;#34;&lt;/span&gt;, grpc.&lt;span style=&#34;color:#c0f&#34;&gt;WithInsecure&lt;/span&gt;())
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// error handling omitted
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;client &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; pb.&lt;span style=&#34;color:#c0f&#34;&gt;NewGreeterClient&lt;/span&gt;(conn)
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;s &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; grpc.&lt;span style=&#34;color:#c0f&#34;&gt;NewServer&lt;/span&gt;()
lis, _ &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; net.&lt;span style=&#34;color:#c0f&#34;&gt;Listen&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;localhost:50051&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// error handling omitted
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;s.&lt;span style=&#34;color:#c0f&#34;&gt;Serve&lt;/span&gt;(lis)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;with-server-authentication-ssltls&#34;&gt;With server authentication SSL/TLS&lt;/h5&gt;
&lt;p&gt;Client:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;creds, _ &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; credentials.&lt;span style=&#34;color:#c0f&#34;&gt;NewClientTLSFromFile&lt;/span&gt;(certFile, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
conn, _ &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; grpc.&lt;span style=&#34;color:#c0f&#34;&gt;Dial&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;localhost:50051&amp;#34;&lt;/span&gt;, grpc.&lt;span style=&#34;color:#c0f&#34;&gt;WithTransportCredentials&lt;/span&gt;(creds))
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// error handling omitted
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;client &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; pb.&lt;span style=&#34;color:#c0f&#34;&gt;NewGreeterClient&lt;/span&gt;(conn)
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;creds, _ &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; credentials.&lt;span style=&#34;color:#c0f&#34;&gt;NewServerTLSFromFile&lt;/span&gt;(certFile, keyFile)
s &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; grpc.&lt;span style=&#34;color:#c0f&#34;&gt;NewServer&lt;/span&gt;(grpc.&lt;span style=&#34;color:#c0f&#34;&gt;Creds&lt;/span&gt;(creds))
lis, _ &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; net.&lt;span style=&#34;color:#c0f&#34;&gt;Listen&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;tcp&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;localhost:50051&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// error handling omitted
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;s.&lt;span style=&#34;color:#c0f&#34;&gt;Serve&lt;/span&gt;(lis)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-with-google&#34;&gt;Authenticate with Google&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;pool, _ &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; x509.&lt;span style=&#34;color:#c0f&#34;&gt;SystemCertPool&lt;/span&gt;()
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// error handling omitted
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;creds &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; credentials.&lt;span style=&#34;color:#c0f&#34;&gt;NewClientTLSFromCert&lt;/span&gt;(pool, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
perRPC, _ &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; oauth.&lt;span style=&#34;color:#c0f&#34;&gt;NewServiceAccountFromFile&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;service-account.json&amp;#34;&lt;/span&gt;, scope)
conn, _ &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; grpc.&lt;span style=&#34;color:#c0f&#34;&gt;Dial&lt;/span&gt;(
	&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;greeter.googleapis.com&amp;#34;&lt;/span&gt;,
	grpc.&lt;span style=&#34;color:#c0f&#34;&gt;WithTransportCredentials&lt;/span&gt;(creds),
	grpc.&lt;span style=&#34;color:#c0f&#34;&gt;WithPerRPCCredentials&lt;/span&gt;(perRPC),
)
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// error handling omitted
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;client &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; pb.&lt;span style=&#34;color:#c0f&#34;&gt;NewGreeterClient&lt;/span&gt;(conn)
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;ruby&#34;&gt;Ruby&lt;/h4&gt;
&lt;h5 id=&#34;base-case---no-encryption-or-authentication-1&#34;&gt;Base case - no encryption or authentication&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;
stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#360&#34;&gt;Helloworld&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Greeter&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Stub&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;localhost:50051&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#fc3&#34;&gt;:this_channel_is_insecure&lt;/span&gt;)
&lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;with-server-authentication-ssltls-1&#34;&gt;With server authentication SSL/TLS&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#360&#34;&gt;GRPC&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Core&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;ChannelCredentials&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new(load_certs)  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# load_certs typically loads a CA roots file&lt;/span&gt;
stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#360&#34;&gt;Helloworld&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Greeter&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Stub&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;myservice.example.com&amp;#39;&lt;/span&gt;, creds)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-with-google-1&#34;&gt;Authenticate with Google&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;googleauth&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# from http://www.rubydoc.info/gems/googleauth/0.1.0&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;
ssl_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#360&#34;&gt;GRPC&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Core&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;ChannelCredentials&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new(load_certs)  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# load_certs typically loads a CA roots file&lt;/span&gt;
authentication &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#360&#34;&gt;Google&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Auth&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;get_application_default()
call_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#360&#34;&gt;GRPC&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Core&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;CallCredentials&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new(authentication&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;updater_proc)
combined_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ssl_creds&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;compose(call_creds)
stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#360&#34;&gt;Helloworld&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Greeter&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Stub&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;greeter.googleapis.com&amp;#39;&lt;/span&gt;, combined_creds)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;c&#34;&gt;C++&lt;/h4&gt;
&lt;h5 id=&#34;base-case---no-encryption-or-authentication-2&#34;&gt;Base case - no encryption or authentication&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;CreateChannel(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;localhost:50051&amp;#34;&lt;/span&gt;, InsecureChannelCredentials());
std&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;Greeter&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Stub&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; stub(Greeter&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;NewStub(channel));
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;with-server-authentication-ssltls-2&#34;&gt;With server authentication SSL/TLS&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; channel_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;SslCredentials(grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;SslCredentialsOptions());
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;CreateChannel(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;myservice.example.com&amp;#34;&lt;/span&gt;, channel_creds);
std&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;Greeter&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Stub&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; stub(Greeter&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;NewStub(channel));
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-with-google-2&#34;&gt;Authenticate with Google&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;GoogleDefaultCredentials();
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;CreateChannel(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;greeter.googleapis.com&amp;#34;&lt;/span&gt;, creds);
std&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;Greeter&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Stub&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; stub(Greeter&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;NewStub(channel));
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;csharp&#34;&gt;C#&lt;/h4&gt;
&lt;h5 id=&#34;base-case---no-encryption-or-authentication-3&#34;&gt;Base case - no encryption or authentication&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; channel = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Channel(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;localhost:50051&amp;#34;&lt;/span&gt;, ChannelCredentials.Insecure);
&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; client = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Greeter.GreeterClient(channel);
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;with-server-authentication-ssltls-3&#34;&gt;With server authentication SSL/TLS&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; channelCredentials = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; SslCredentials(File.ReadAllText(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;roots.pem&amp;#34;&lt;/span&gt;));  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Load a custom roots file.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; channel = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Channel(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;myservice.example.com&amp;#34;&lt;/span&gt;, channelCredentials);
&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; client = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Greeter.GreeterClient(channel);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-with-google-3&#34;&gt;Authenticate with Google&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;Grpc.Auth&lt;/span&gt;;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// from Grpc.Auth NuGet package
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;...
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Loads Google Application Default Credentials with publicly trusted roots.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; channelCredentials = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; GoogleGrpcCredentials.GetApplicationDefaultAsync();

&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; channel = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Channel(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;greeter.googleapis.com&amp;#34;&lt;/span&gt;, channelCredentials);
&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; client = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Greeter.GreeterClient(channel);
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-a-single-rpc-call&#34;&gt;Authenticate a single RPC call&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; channel = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Channel(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;greeter.googleapis.com&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; SslCredentials());  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Use publicly trusted roots.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; client = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Greeter.GreeterClient(channel);
...
&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; googleCredential = &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; GoogleCredential.GetApplicationDefaultAsync();
&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; result = client.SayHello(request, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; CallOptions(credentials: googleCredential.ToCallCredentials()));
...

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;python&#34;&gt;Python&lt;/h4&gt;
&lt;h5 id=&#34;base-case---no-encryption-or-authentication-4&#34;&gt;Base case - No encryption or authentication&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;grpc&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;helloworld_pb2&lt;/span&gt;

channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;insecure_channel(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;localhost:50051&amp;#39;&lt;/span&gt;)
stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; helloworld_pb2&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;GreeterStub(channel)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;with-server-authentication-ssltls-4&#34;&gt;With server authentication SSL/TLS&lt;/h5&gt;
&lt;p&gt;Client:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;grpc&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;helloworld_pb2&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;roots.pem&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
    creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ssl_channel_credentials(f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read())
channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;secure_channel(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;myservice.example.com:443&amp;#39;&lt;/span&gt;, creds)
stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; helloworld_pb2&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;GreeterStub(channel)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;grpc&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;helloworld_pb2&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;concurrent&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; futures

server &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;server(futures&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ThreadPoolExecutor(max_workers&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;))
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;key.pem&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
    private_key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;chain.pem&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
    certificate_chain &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
server_credentials &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ssl_server_credentials( ( (private_key, certificate_chain), ) )
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Adding GreeterServicer to server omitted&lt;/span&gt;
server&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add_secure_port(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;myservice.example.com:443&amp;#39;&lt;/span&gt;, server_credentials)
server&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;start()
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Server sleep omitted&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-with-google-using-a-jwt&#34;&gt;Authenticate with Google using a JWT&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;grpc&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;helloworld_pb2&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;google&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; auth &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; google_auth
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;google.auth&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; jwt &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; google_auth_jwt
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;google.auth.transport&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; grpc &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; google_auth_transport_grpc

credentials, _ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; google_auth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;default()
jwt_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; google_auth_jwt&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;OnDemandCredentials&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;from_signing_credentials(
    credentials)
channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; google_auth_transport_grpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;secure_authorized_channel(
    jwt_creds, None, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;greeter.googleapis.com:443&amp;#39;&lt;/span&gt;)
stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; helloworld_pb2&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;GreeterStub(channel)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-with-google-using-an-oauth2-token&#34;&gt;Authenticate with Google using an Oauth2 token&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;grpc&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;helloworld_pb2&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;google&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; auth &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; google_auth
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;google.auth.transport&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; grpc &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; google_auth_transport_grpc
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;google.auth.transport&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; requests &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; google_auth_transport_requests

credentials, _ &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; google_auth&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;default(scopes&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;(scope,))
request &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; google_auth_transport_requests&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;Request()
channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; google_auth_transport_grpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;secure_authorized_channel(
    credentials, request, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;greeter.googleapis.com:443&amp;#39;&lt;/span&gt;)
stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; helloworld_pb2&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;GreeterStub(channel)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;with-server-authentication-ssltls-and-a-custom-header-with-token&#34;&gt;With server authentication SSL/TLS and a custom header with token&lt;/h5&gt;
&lt;p&gt;Client:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;grpc&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;helloworld_pb2&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;GrpcAuth&lt;/span&gt;(grpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;AuthMetadataPlugin):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, key):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; key

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __call__(self, context, callback):
        callback(((&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;rpc-auth-header&amp;#39;&lt;/span&gt;, self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_key),), None)

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;path/to/root-cert&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; fh:
    root_cert &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fh&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()

channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;secure_channel(
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;myservice.example.com:443&amp;#39;&lt;/span&gt;,
    grpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;composite_channel_credentials(
        grpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ssl_channel_credentials(root_cert),
        grpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;metadata_call_credentials(
            GrpcAuth(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;access_key&amp;#39;&lt;/span&gt;)
        )
    )
)

stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; helloworld_pb2&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;GreeterStub(channel)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;concurrent&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; futures

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;grpc&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;helloworld_pb2&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;AuthInterceptor&lt;/span&gt;(grpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ServerInterceptor):
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, key):
        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_valid_metadata &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;rpc-auth-header&amp;#39;&lt;/span&gt;, key)

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;deny&lt;/span&gt;(_, context):
            context&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;abort(grpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;StatusCode&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;UNAUTHENTICATED, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Invalid key&amp;#39;&lt;/span&gt;)

        self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_deny &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;unary_unary_rpc_method_handler(deny)

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;intercept_service&lt;/span&gt;(self, continuation, handler_call_details):
        meta &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; handler_call_details&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;invocation_metadata

        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; meta &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;and&lt;/span&gt; meta[&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_valid_metadata:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; continuation(handler_call_details)
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt;:
            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;_deny

server &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;server(
    futures&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ThreadPoolExecutor(max_workers&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;),
    interceptors&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;(AuthInterceptor(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;access_key&amp;#39;&lt;/span&gt;),)
)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;key.pem&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
    private_key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;chain.pem&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; f:
    certificate_chain &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
server_credentials &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;ssl_server_credentials( ( (private_key, certificate_chain), ) )
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Adding GreeterServicer to server omitted&lt;/span&gt;
server&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;add_secure_port(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;myservice.example.com:443&amp;#39;&lt;/span&gt;, server_credentials)
server&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;start()
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Server sleep omitted&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;java&#34;&gt;Java&lt;/h4&gt;
&lt;h5 id=&#34;base-case---no-encryption-or-authentication-5&#34;&gt;Base case - no encryption or authentication&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;ManagedChannel channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ManagedChannelBuilder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;forAddress&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; 50051&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;usePlaintext&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
GreeterGrpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;GreeterStub&lt;/span&gt; stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; GreeterGrpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;newStub&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;channel&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;with-server-authentication-ssltls-5&#34;&gt;With server authentication SSL/TLS&lt;/h5&gt;
&lt;p&gt;In Java we recommend that you use OpenSSL when using gRPC over TLS. You can find
details about installing and using OpenSSL and other required libraries for both
Android and non-Android Java in the gRPC Java
&lt;a href=&#34;https://github.com/grpc/grpc-java/blob/master/SECURITY.md#transport-security-tls&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Security&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
documentation.&lt;/p&gt;
&lt;p&gt;To enable TLS on a server, a certificate chain and private key need to be
specified in PEM format. Such private key should not be using a password.
The order of certificates in the chain matters: more specifically, the certificate
at the top has to be the host CA, while the one at the very bottom
has to be the root CA. The standard TLS port is 443, but we use 8443 below to
avoid needing extra permissions from the OS.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Server server &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ServerBuilder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;forPort&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;8443&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Enable TLS
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;useTransportSecurity&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;certChainFile&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; privateKeyFile&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;addService&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;TestServiceGrpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;bindService&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;serviceImplementation&lt;span style=&#34;color:#555&#34;&gt;))&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
server&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the issuing certificate authority is not known to the client then a properly
configured &lt;code&gt;SslContext&lt;/code&gt; or &lt;code&gt;SSLSocketFactory&lt;/code&gt; should be provided to the
&lt;code&gt;NettyChannelBuilder&lt;/code&gt; or &lt;code&gt;OkHttpChannelBuilder&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;p&gt;On the client side, server authentication with SSL/TLS looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// With server authentication SSL/TLS
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;ManagedChannel channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ManagedChannelBuilder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;forAddress&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;myservice.example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; 443&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
GreeterGrpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;GreeterStub&lt;/span&gt; stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; GreeterGrpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;newStub&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;channel&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// With server authentication SSL/TLS; custom CA root certificates; not on Android
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;ManagedChannel channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; NettyChannelBuilder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;forAddress&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;myservice.example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; 443&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;sslContext&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;GrpcSslContexts&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;forClient&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;trustManager&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; File&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;roots.pem&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)).&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;())&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
GreeterGrpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;GreeterStub&lt;/span&gt; stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; GreeterGrpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;newStub&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;channel&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-with-google-4&#34;&gt;Authenticate with Google&lt;/h5&gt;
&lt;p&gt;The following code snippet shows how you can call the &lt;a href=&#34;https://cloud.google.com/pubsub/overview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Cloud PubSub
API&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; using gRPC with a service
account. The credentials are loaded from a key stored in a well-known location
or by detecting that the application is running in an environment that can
provide one automatically, e.g. Google Compute Engine. While this example is
specific to Google and its services, similar patterns can be followed for other
service providers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;GoogleCredentials creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; GoogleCredentials&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getApplicationDefault&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
ManagedChannel channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ManagedChannelBuilder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;forTarget&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;greeter.googleapis.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
GreeterGrpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;GreeterStub&lt;/span&gt; stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; GreeterGrpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;newStub&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;channel&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;withCallCredentials&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;MoreCallCredentials&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;creds&lt;span style=&#34;color:#555&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;nodejs&#34;&gt;Node.js&lt;/h4&gt;
&lt;h5 id=&#34;base-case---no-encryptionauthentication&#34;&gt;Base case - No encryption/authentication&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; helloworld.Greeter(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;localhost:50051&amp;#39;&lt;/span&gt;, grpc.credentials.createInsecure());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;with-server-authentication-ssltls-6&#34;&gt;With server authentication SSL/TLS&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; root_cert &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fs.readFileSync(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;path/to/root-cert&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; ssl_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.credentials.createSsl(root_cert);
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; helloworld.Greeter(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;myservice.example.com&amp;#39;&lt;/span&gt;, ssl_creds);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-with-google-5&#34;&gt;Authenticate with Google&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Authenticating with Google
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; GoogleAuth &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;google-auth-library&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// from https://www.npmjs.com/package/google-auth-library
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;...
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; ssl_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.credentials.createSsl(root_certs);
(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; GoogleAuth()).getApplicationDefault(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt;(err, auth) {
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; call_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.credentials.createFromGoogleCredential(auth);
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; combined_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.credentials.combineChannelCredentials(ssl_creds, call_creds);
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; helloworld.Greeter(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;greeter.googleapis.com&amp;#39;&lt;/span&gt;, combined_credentials);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-with-google-using-oauth2-token-legacy-approach&#34;&gt;Authenticate with Google using Oauth2 token (legacy approach)&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; GoogleAuth &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;google-auth-library&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// from https://www.npmjs.com/package/google-auth-library
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;...
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; ssl_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.Credentials.createSsl(root_certs); &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// load_certs typically loads a CA roots file
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; scope &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;https://www.googleapis.com/auth/grpc-testing&amp;#39;&lt;/span&gt;;
(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; GoogleAuth()).getApplicationDefault(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt;(err, auth) {
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (auth.createScopeRequired()) {
    auth &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auth.createScoped(scope);
  }
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; call_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.credentials.createFromGoogleCredential(auth);
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; combined_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.credentials.combineChannelCredentials(ssl_creds, call_creds);
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; helloworld.Greeter(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;greeter.googleapis.com&amp;#39;&lt;/span&gt;, combined_credentials);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;with-server-authentication-ssltls-and-a-custom-header-with-token-1&#34;&gt;With server authentication SSL/TLS and a custom header with token&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; rootCert &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fs.readFileSync(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;path/to/root-cert&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; channelCreds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.credentials.createSsl(rootCert);
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; metaCallback &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (_params, callback) =&amp;gt; {
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; meta &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; grpc.Metadata();
    meta.add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;custom-auth-header&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;token&amp;#39;&lt;/span&gt;);
    callback(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;null&lt;/span&gt;, meta);
}
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; callCreds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.credentials.createFromMetadataGenerator(metaCallback);
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; combCreds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.credentials.combineChannelCredentials(channelCreds, callCreds);
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; helloworld.Greeter(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;myservice.example.com&amp;#39;&lt;/span&gt;, combCreds);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;php&#34;&gt;PHP&lt;/h4&gt;
&lt;h5 id=&#34;base-case---no-encryptionauthorization&#34;&gt;Base case - No encryption/authorization&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#033&#34;&gt;$client&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; helloworld\GreeterClient(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;localhost:50051&amp;#39;&lt;/span&gt;, [
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;credentials&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; Grpc\ChannelCredentials&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;createInsecure&lt;/span&gt;(),
]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-with-google-6&#34;&gt;Authenticate with Google&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;updateAuthMetadataCallback&lt;/span&gt;(&lt;span style=&#34;color:#033&#34;&gt;$context&lt;/span&gt;)
{
    &lt;span style=&#34;color:#033&#34;&gt;$auth_credentials&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ApplicationDefaultCredentials&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getCredentials&lt;/span&gt;();
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#033&#34;&gt;$auth_credentials&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;updateMetadata&lt;/span&gt;(&lt;span style=&#34;color:#033&#34;&gt;$metadata&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [], &lt;span style=&#34;color:#033&#34;&gt;$context&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;service_url&lt;/span&gt;);
}
&lt;span style=&#34;color:#033&#34;&gt;$channel_credentials&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Grpc\ChannelCredentials&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;createComposite&lt;/span&gt;(
    Grpc\ChannelCredentials&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;createSsl&lt;/span&gt;(file_get_contents(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;roots.pem&amp;#39;&lt;/span&gt;)),
    Grpc\CallCredentials&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;createFromPlugin&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;updateAuthMetadataCallback&amp;#39;&lt;/span&gt;)
);
&lt;span style=&#34;color:#033&#34;&gt;$opts&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;credentials&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#033&#34;&gt;$channel_credentials&lt;/span&gt;
];
&lt;span style=&#34;color:#033&#34;&gt;$client&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; helloworld\GreeterClient(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;greeter.googleapis.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#033&#34;&gt;$opts&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-with-google-using-oauth2-token-legacy-approach-1&#34;&gt;Authenticate with Google using Oauth2 token (legacy approach)&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// the environment variable &amp;#34;GOOGLE_APPLICATION_CREDENTIALS&amp;#34; needs to be set
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;$scope&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://www.googleapis.com/auth/grpc-testing&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#033&#34;&gt;$auth&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Google\Auth\ApplicationDefaultCredentials&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getCredentials&lt;/span&gt;(&lt;span style=&#34;color:#033&#34;&gt;$scope&lt;/span&gt;);
&lt;span style=&#34;color:#033&#34;&gt;$opts&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;credentials&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; Grpc\Credentials&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;createSsl&lt;/span&gt;(file_get_contents(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;roots.pem&amp;#39;&lt;/span&gt;));
  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;update_metadata&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#033&#34;&gt;$auth&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getUpdateMetadataFunc&lt;/span&gt;(),
];
&lt;span style=&#34;color:#033&#34;&gt;$client&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; helloworld\GreeterClient(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;greeter.googleapis.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#033&#34;&gt;$opts&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;dart&#34;&gt;Dart&lt;/h4&gt;
&lt;h5 id=&#34;base-case---no-encryption-or-authentication-6&#34;&gt;Base case - no encryption or authentication&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ClientChannel(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#99f&#34;&gt;port:&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;50051&lt;/span&gt;,
      &lt;span style=&#34;color:#99f&#34;&gt;options:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; ChannelOptions(
          &lt;span style=&#34;color:#99f&#34;&gt;credentials:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; ChannelCredentials.insecure()));
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; GreeterClient(channel);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;with-server-authentication-ssltls-7&#34;&gt;With server authentication SSL/TLS&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Load a custom roots file.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; trustedRoot &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; File(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;roots.pem&amp;#39;&lt;/span&gt;).readAsBytesSync();
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; channelCredentials &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ChannelCredentials.secure(&lt;span style=&#34;color:#99f&#34;&gt;certificates:&lt;/span&gt; trustedRoot);
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; channelOptions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ChannelOptions(&lt;span style=&#34;color:#99f&#34;&gt;credentials:&lt;/span&gt; channelCredentials);
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ClientChannel(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;myservice.example.com&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#99f&#34;&gt;options:&lt;/span&gt; channelOptions);
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; client &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; GreeterClient(channel);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-with-google-7&#34;&gt;Authenticate with Google&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Uses publicly trusted roots by default.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ClientChannel(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;greeter.googleapis.com&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; serviceAccountJson &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;
     &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; File(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;service-account.json&amp;#39;&lt;/span&gt;).readAsStringSync();
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; credentials &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; JwtServiceAccountAuthenticator(serviceAccountJson);
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; client &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; GreeterClient(channel, &lt;span style=&#34;color:#99f&#34;&gt;options:&lt;/span&gt; credentials.toCallOptions);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-a-single-rpc-call-1&#34;&gt;Authenticate a single RPC call&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Uses publicly trusted roots by default.
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ClientChannel(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;greeter.googleapis.com&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; client &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; GreeterClient(channel);
...
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; serviceAccountJson &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;
     &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; File(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;service-account.json&amp;#39;&lt;/span&gt;).readAsStringSync();
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; credentials &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; JwtServiceAccountAuthenticator(serviceAccountJson);
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; response &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; client.sayHello(request, &lt;span style=&#34;color:#99f&#34;&gt;options:&lt;/span&gt; credentials.toCallOptions);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Benchmarking</title>
      <link>https://Joevaen.github.io/docs/guides/benchmarking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/guides/benchmarking/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;gRPC is designed for both high-performance and high-productivity
design of distributed applications. Continuous performance
benchmarking is a critical part of the gRPC development
workflow. Multi-language performance tests run every few hours against
the master branch, and these numbers are reported to a dashboard for
visualization.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5180705743044608&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Multi-language performance dashboard @master (latest dev version)&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;performance-testing-design&#34;&gt;Performance testing design&lt;/h3&gt;
&lt;p&gt;Each language implements a performance testing worker that implements
a gRPC
&lt;a href=&#34;https://github.com/grpc/grpc/blob/master/src/proto/grpc/testing/worker_service.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WorkerService&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. This
service directs the worker to act as either a client or a server for
the actual benchmark test, represented as
&lt;a href=&#34;https://github.com/grpc/grpc/blob/master/src/proto/grpc/testing/benchmark_service.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BenchmarkService&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. That
service has two methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UnaryCall - a unary RPC of a simple request that specifies the number of bytes to return in the response&lt;/li&gt;
&lt;li&gt;StreamingCall - a streaming RPC that allows repeated ping-pongs of request and response messages akin to the UnaryCall&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://Joevaen.github.io/img/testing_framework.png&#34; alt=&#34;gRPC performance testing worker diagram&#34; id=&#34;testing_framework&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-testing_framework&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-testing_framework&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://Joevaen.github.io/img/testing_framework.png&#34; alt=&#34;gRPC performance testing worker diagram&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;These workers are controlled by a
&lt;a href=&#34;https://github.com/grpc/grpc/blob/master/test/cpp/qps/qps_json_driver.cc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;driver&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
that takes as input a scenario description (in JSON format) and an
environment variable specifying the host:port of each worker process.&lt;/p&gt;
&lt;h3 id=&#34;languages-under-test&#34;&gt;Languages under test&lt;/h3&gt;
&lt;p&gt;The following languages have continuous performance testing as both
clients and servers at master:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;li&gt;node.js&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to running as both the client-side and server-side of
performance tests, all languages are tested as clients against a C++
server, and as servers against a C++ client. This test aims to provide
the current upper bound of performance for a given language&amp;rsquo;s client or
server implementation without testing the other side.&lt;/p&gt;
&lt;p&gt;Although PHP or mobile environments do not support a gRPC server
(which is needed for our performance tests), their client-side
performance can be benchmarked using a proxy WorkerService written in
another language. This code is implemented for PHP but is not yet in
continuous testing mode.&lt;/p&gt;
&lt;h3 id=&#34;scenarios-under-test&#34;&gt;Scenarios under test&lt;/h3&gt;
&lt;p&gt;There are several important scenarios under test and displayed in the dashboards
above, including the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contentionless latency - the median and tail response latencies seen with only 1 client sending a single message at a time using StreamingCall&lt;/li&gt;
&lt;li&gt;QPS - the messages/second rate when there are 2 clients and a total of 64 channels, each of which has 100 outstanding messages at a time sent using StreamingCall&lt;/li&gt;
&lt;li&gt;Scalability (for selected languages) - the number of messages/second per server core&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most performance testing is using secure communication and
protobufs. Some C++ tests additionally use insecure communication and
the generic (non-protobuf) API to display peak performance. Additional
scenarios may be added in the future.&lt;/p&gt;
&lt;h3 id=&#34;testing-infrastructure&#34;&gt;Testing infrastructure&lt;/h3&gt;
&lt;p&gt;All performance benchmarks are run in our dedicated GKE cluster,
where each benchmark worker (a client or a server) gets scheduled to different
GKE node (and each GKE node is a separate GCE VM) in one of our worker pools.
The source code for the benchmarking framework we use is publicly
available in the &lt;a href=&#34;https://github.com/grpc/test-infra&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;test-infra github repository&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most test instances are 8-core systems, and these are used for both
latency and QPS measurement. For C++ and Java, we additionally support
QPS testing on 32-core systems. All QPS tests use 2 identical client machines
for each server, to make sure that QPS measurement is not client-limited.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Error handling</title>
      <link>https://Joevaen.github.io/docs/guides/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/guides/error/</guid>
      <description>
        
        
        &lt;h3 id=&#34;standard-error-model&#34;&gt;Standard error model&lt;/h3&gt;
&lt;p&gt;As you&amp;rsquo;ll have seen in our concepts document and examples, when a gRPC call
completes successfully the server returns an &lt;code&gt;OK&lt;/code&gt; status to the client
(depending on the language the &lt;code&gt;OK&lt;/code&gt; status may or may not be directly used in
your code). But what happens if the call isn&amp;rsquo;t successful?&lt;/p&gt;
&lt;p&gt;If an error occurs, gRPC returns one of its error status codes instead, with an
optional string error message that provides further details about what happened.
Error information is available to gRPC clients in all supported languages.&lt;/p&gt;
&lt;h3 id=&#34;richer-error-model&#34;&gt;Richer error model&lt;/h3&gt;
&lt;p&gt;The error model described above is the official gRPC error model,
is supported by all gRPC client/server libraries, and is independent of
the gRPC data format (whether protocol buffers or something else). You
may have noticed that it&amp;rsquo;s quite limited and doesn&amp;rsquo;t include the
ability to communicate error details.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using protocol buffers as your data format, however, you may
wish to consider using the richer error model developed and used
by Google as described
&lt;a href=&#34;https://cloud.google.com/apis/design/errors#error_model&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. This
model enables servers to return and clients to consume additional
error details expressed as one or more protobuf messages. It further
specifies a &lt;a href=&#34;https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;standard set of error message
types&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
to cover the most common needs (such as invalid parameters, quota
violations, and stack traces). The protobuf binary encoding of this
extra error information is provided as trailing metadata in the
response.&lt;/p&gt;
&lt;p&gt;This richer error model is already supported in the C++, Go, Java,
Python, and Ruby libraries, and at least the grpc-web and Node.js
libraries have open issues requesting it. Other language libraries may
add support in the future if there&amp;rsquo;s demand, so check their github
repos if interested. Note however that the grpc-core library written
in C will not likely ever support it since it is purposely data format
agnostic.&lt;/p&gt;
&lt;p&gt;You could use a similar approach (put error details in trailing
response metadata) if you&amp;rsquo;re not using protocol buffers, but you&amp;rsquo;d
likely need to find or develop library support for accessing this data
in order to make practical use of it in your APIs.&lt;/p&gt;
&lt;p&gt;There are important considerations to be aware of when deciding whether to
use such an extended error model, however, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Library implementations of the extended error model may not be consistent
across languages in terms of requirements for and expectations of the error
details payload&lt;/li&gt;
&lt;li&gt;Existing proxies, loggers, and other standard HTTP request
processors don&amp;rsquo;t have visibility into the error details and thus
wouldn&amp;rsquo;t be able to leverage them for monitoring or other purposes&lt;/li&gt;
&lt;li&gt;Additional error detail in the trailers interferes with head-of-line
blocking, and will decrease HTTP/2 header compression efficiency due to
more frequent cache misses&lt;/li&gt;
&lt;li&gt;Larger error detail payloads may run into protocol limits (like
max headers size), effectively losing the original error&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;error-status-codes&#34;&gt;Error status codes&lt;/h3&gt;
&lt;p&gt;Errors are raised by gRPC under various circumstances, from network failures to
unauthenticated connections, each of which is associated with a particular
status code. The following error status codes are supported in all gRPC
languages.&lt;/p&gt;
&lt;h4 id=&#34;general-errors&#34;&gt;General errors&lt;/h4&gt;
&lt;style&gt;
  td code { word-break: normal; }
&lt;/style&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Case&lt;/th&gt;
&lt;th&gt;Status code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Client application cancelled the request&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_CANCELLED&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deadline expired before server returned status&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_DEADLINE_EXCEEDED&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Method not found on server&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_UNIMPLEMENTED&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Server shutting down&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_UNAVAILABLE&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Server threw an exception (or did something other than returning a status code to terminate the RPC)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;network-failures&#34;&gt;Network failures&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Case&lt;/th&gt;
&lt;th&gt;Status code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;No data transmitted before deadline expires. Also applies to cases where some data is transmitted and no other failures are detected before the deadline expires&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_DEADLINE_EXCEEDED&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Some data transmitted (for example, the request metadata has been written to the TCP connection) before the connection breaks&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_UNAVAILABLE&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;protocol-errors&#34;&gt;Protocol errors&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Case&lt;/th&gt;
&lt;th&gt;Status code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Could not decompress but compression algorithm supported&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_INTERNAL&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Compression mechanism used by client not supported by the server&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_UNIMPLEMENTED&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Flow-control resource limits reached&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_RESOURCE_EXHAUSTED&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Flow-control protocol violation&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_INTERNAL&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Error parsing returned status&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Unauthenticated: credentials failed to get metadata&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_UNAUTHENTICATED&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Invalid host set in authority metadata&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_UNAUTHENTICATED&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Error parsing response protocol buffer&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_INTERNAL&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Error parsing request protocol buffer&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_INTERNAL&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;sample-code&#34;&gt;Sample code&lt;/h3&gt;
&lt;p&gt;For sample code illustrating how to handle various gRPC errors, see the
&lt;a href=&#34;https://github.com/avinassh/grpc-errors&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc-errors&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; repo.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
