<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gRPC – 自定义自建hooks</title>
    <link>https://Joevaen.github.io/docs/languages/java/hooks/optimizer_torch/</link>
    <description>Recent content in 自定义自建hooks on gRPC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="https://Joevaen.github.io/docs/languages/java/hooks/optimizer_torch/feed.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 创建一个新的hook</title>
      <link>https://Joevaen.github.io/docs/languages/java/hooks/optimizer_torch/new_hook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/java/hooks/optimizer_torch/new_hook/</guid>
      <description>
        
        
        &lt;p&gt;There are some occasions when the users might need to implement a new hook. MMDetection supports customized hooks in training (#3395) since v2.3.0. Thus the users could implement a hook directly in mmdet or their mmdet-based codebases and use the hook by only modifying the config in training.
Before v2.3.0, the users need to modify the code to get the hook registered before training starts.
Here we give an example of creating a new hook in mmdet and using it in training.
有时候用户可能需要实现新hook。 MMDetection自V2.3.0以来支持训练定制hook。 因此，用户可以直接在MMDET或基于MMDET的代码库中实现hook，并仅通过在训练中修改配置来使用hook。 在v2.3.0之前，用户需要修改代码以在训练开始之前获取已注册的hook。 在这里，我们举例说明在MMDET中创建新hook并在训练中使用它。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;mmcv.runner&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; HOOKS, Hook


&lt;span style=&#34;color:#99f&#34;&gt;@HOOKS.register_module&lt;/span&gt;()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;MyHook&lt;/span&gt;(Hook):

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, a, b):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;before_run&lt;/span&gt;(self, runner):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;after_run&lt;/span&gt;(self, runner):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;before_epoch&lt;/span&gt;(self, runner):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;after_epoch&lt;/span&gt;(self, runner):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;before_iter&lt;/span&gt;(self, runner):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;after_iter&lt;/span&gt;(self, runner):
        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;取决于hook的功能，使用者需要确定hook会在训练的&lt;code&gt;before_run&lt;/code&gt;, &lt;code&gt;after_run&lt;/code&gt;, &lt;code&gt;before_epoch&lt;/code&gt;, &lt;code&gt;after_epoch&lt;/code&gt;, &lt;code&gt;before_iter&lt;/code&gt;, 和 &lt;code&gt;after_iter&lt;/code&gt;各个阶段做些什么事情。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 注册一个新的hook</title>
      <link>https://Joevaen.github.io/docs/languages/java/hooks/optimizer_torch/register/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/java/hooks/optimizer_torch/register/</guid>
      <description>
        
        
        &lt;p&gt;下一步我们需要导入&lt;code&gt;MyHook&lt;/code&gt;，假设你创建的hook在&lt;code&gt;mmdet/core/utils/my_hook.py&lt;/code&gt;中，你需要做以下两件事：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;修改&lt;code&gt;mmdet/core/utils/__init__.py&lt;/code&gt;来导入你的hook。&lt;/p&gt;
&lt;p&gt;新定义的模块应当在 &lt;code&gt;mmdet/core/utils/__init__.py&lt;/code&gt; 中导入，使得注册表可以找到并添加这个模块：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;.my_hook&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; MyHook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;custom_imports&lt;/code&gt;在配置文件中使用&lt;code&gt;custom_imports&lt;/code&gt;来导入hook。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;custom_imports &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(imports&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;mmdet.core.utils.my_hook&amp;#39;&lt;/span&gt;], allow_failed_imports&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: 修改配置文件</title>
      <link>https://Joevaen.github.io/docs/languages/java/hooks/optimizer_torch/modify_config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/java/hooks/optimizer_torch/modify_config/</guid>
      <description>
        
        
        &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;custom_hooks &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;MyHook&amp;#39;&lt;/span&gt;, a&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;a_value, b&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;b_value)
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以设置hook的优先次序通过指定键&lt;code&gt;priority&lt;/code&gt;的值为&lt;code&gt;&#39;NORMAL&#39;&lt;/code&gt; 或者 &lt;code&gt;&#39;HIGHEST&#39;&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;custom_hooks &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
    &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(&lt;span style=&#34;color:#366&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;MyHook&amp;#39;&lt;/span&gt;, a&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;a_value, b&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;b_value, priority&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;NORMAL&amp;#39;&lt;/span&gt;)
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注册表中的hook默认顺序是&lt;code&gt;NORMAL&lt;/code&gt;。&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
