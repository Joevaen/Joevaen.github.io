<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gRPC – 5.自定义runtime设置</title>
    <link>https://Joevaen.github.io/docs/languages/java/</link>
    <description>Recent content in 5.自定义runtime设置 on gRPC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="https://Joevaen.github.io/docs/languages/java/feed.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: 自定义优化设置</title>
      <link>https://Joevaen.github.io/docs/languages/java/optimizer_setting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/java/optimizer_setting/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>Docs: 自定义训练时间表</title>
      <link>https://Joevaen.github.io/docs/languages/java/training_schedule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/java/training_schedule/</guid>
      <description>
        
        
        &lt;p&gt;我们默认使用1倍的schedule的学习率，在MMCV里，这被称为&lt;a href=&#34;https://github.com/open-mmlab/mmcv/blob/f48241a65aebfe07db122e9db320c31b685dc674/mmcv/runner/hooks/lr_updater.py#L153&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;StepLRHook&lt;/code&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;。
We support many other learning rate schedule &lt;a href=&#34;https://github.com/open-mmlab/mmcv/blob/master/mmcv/runner/hooks/lr_updater.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, such as &lt;code&gt;CosineAnnealing&lt;/code&gt; and &lt;code&gt;Poly&lt;/code&gt; schedule. Here are some examples
我们也支持许多其他的学习率调度&lt;a href=&#34;https://github.com/open-mmlab/mmcv/blob/master/mmcv/runner/hooks/lr_updater.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;，比如&lt;code&gt;CosineAnnealing&lt;/code&gt; 和 &lt;code&gt;Poly&lt;/code&gt;。下面是一些例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Poly schedule:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;lr_config &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(policy&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;poly&amp;#39;&lt;/span&gt;, power&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0.9&lt;/span&gt;, min_lr&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1e-4&lt;/span&gt;, by_epoch&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;False)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ConsineAnnealing schedule:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;lr_config &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;dict&lt;/span&gt;(
    policy&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;CosineAnnealing&amp;#39;&lt;/span&gt;,
    warmup&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;linear&amp;#39;&lt;/span&gt;,
    warmup_iters&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1000&lt;/span&gt;,
    warmup_ratio&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1.0&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;10&lt;/span&gt;,
    min_lr_ratio&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1e-5&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 自定义workflow</title>
      <link>https://Joevaen.github.io/docs/languages/java/workflow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/java/workflow/</guid>
      <description>
        
        
        &lt;p&gt;是用来确定运行顺序和轮次的一个时期、轮数的列表。
默认为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;workflow &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;train&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面表示训练只跑一轮。
有时使用者可能想在验证集上检查模型的一些算法（损失、精度），这时，我们可以设置workflow为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;[(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;train&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;), (&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;val&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样表示训练跑一轮，验证跑一轮，两者不停迭代。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;验证的论述期间模型的参数不会被更新。
2.配置文件中的&lt;code&gt;total_epochs&lt;/code&gt;仅仅会控制训练轮次，而不会影响验证的workflow。&lt;/li&gt;
&lt;li&gt;Workflows &lt;code&gt;[(&#39;train&#39;, 1), (&#39;val&#39;, 1)]&lt;/code&gt; 和 &lt;code&gt;[(&#39;train&#39;, 1)]&lt;/code&gt; 不会改变 &lt;code&gt;EvalHook&lt;/code&gt;的行为， 因为 &lt;code&gt;EvalHook&lt;/code&gt; 是在 &lt;code&gt;after_train_epoch&lt;/code&gt; 之后才会被使用，而验证的workflow仅仅会影像那些在调用&lt;code&gt;after_val_epoch&lt;/code&gt;过程中才使用的hook。因此, 在 &lt;code&gt;[(&#39;train&#39;, 1), (&#39;val&#39;, 1)]&lt;/code&gt; 和 &lt;code&gt;[(&#39;train&#39;, 1)]&lt;/code&gt; 中唯一的不同是程序会在每次训练之后计算验证集的损失。&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: 自定义hooks</title>
      <link>https://Joevaen.github.io/docs/languages/java/hooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://Joevaen.github.io/docs/languages/java/hooks/</guid>
      <description>
        
        
        
      </description>
    </item>
    
  </channel>
</rss>
